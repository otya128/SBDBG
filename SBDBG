OPTION STRICT
MAIN
DEF GET_SLOT$(N)
 PRGEDIT N
 VAR S$=""
 VAR I,L=PRGSIZE()
 FOR I=1TO L
  PUSH S$,PRGGET$()
 NEXT
 RETURN S$
END
DEF MAIN
 VAR SW,SH,TS,TS2
 XSCREEN OUT SW,SH
 IF SW!=1280||SH!=720THEN
  XSCREEN 1280,720
 ENDIF
 TSCREEN OUT TS,TS2,,
 IF TS!=16||TS2!=16THEN
  TSCREEN 16
 ENDIF
 ?TS
 VAR IN$=GET_SLOT$(1)'"PRINT 1+2-8*12"'*8"
 INIT_LEXER IN$
 LEX_NEXT OUT ,
 LEX_NEXT OUT ,
 LEX_NEXT OUT ,
 LEX_NEXT OUT ,
 LEX_NEXT OUT ,
 LEX_NEXT OUT ,
 LEX_NEXT OUT ,
 ?IN$
 INIT_VM
 INIT_LEXER IN$
 INIT_AST
 VAR AST=PARSE()
 DUMP_AST AST,0
 INIT_COMPILER
 COMPILE AST
 VM_RUN
END
VAR LEXER_IN$
VAR LEXER_I
VAR LEXER_VAL
ENUM\
 #TKN_NONE,\
 #TKN_NUM,\
 #TKN_STR,\
 #TKN_PRINT,\
 #TKN_DEF,\
 #TKN_RETURN,\
 #TKN_IDEN,\
 #TKN_PLUS,\
 #TKN_MINUS,\
 #TKN_MUL,\
 #TKN_DIV,\
 #TKN_DIVINT,\
 #TKN_COMMA,\
 #TKN_LP,\
 #TKN_RP,\
 #TKN_LB,\
 #TKN_RB,\
 #TKN_SEMI,\
 #TKN_COL,\
 #TKN_NEWLINE,\
 #TKN_EOF,\
 #TKN_MOD,\
 #TKN_LSHIFT,\
 #TKN_RSHIFT,\
 #TKN_EQ,\
 #TKN_NEQ,\
 #TKN_LESS,\
 #TKN_LEQ,\
 #TKN_GREAT,\
 #TKN_GEQ,\
 #TKN_AND,\
 #TKN_OR,\
 #TKN_XOR,\
 #TKN_LAND,\
 #TKN_LOR,\
 #TKN_,\
 #TKN_LAST
DEF TKN_STR$(T)
 CASE T
 WHEN #TKN_NONE:RETURN "#TKN_NONE"
 WHEN #TKN_NUM:RETURN "#TKN_NUM"
 WHEN #TKN_STR:RETURN "#TKN_STR"
 WHEN #TKN_PRINT:RETURN "#TKN_PRINT"
 WHEN #TKN_DEF:RETURN "#TKN_DEF"
 WHEN #TKN_RETURN:RETURN "#TKN_RETURN"
 WHEN #TKN_IDEN:RETURN "#TKN_IDEN"
 WHEN #TKN_PLUS:RETURN "#TKN_PLUS"
 WHEN #TKN_MINUS:RETURN "#TKN_MINUS"
 WHEN #TKN_MUL:RETURN "#TKN_MUL"
 WHEN #TKN_DIV:RETURN "#TKN_DIV"
 WHEN #TKN_DIVINT:RETURN "#TKN_DIVINT"
 WHEN #TKN_COMMA:RETURN "#TKN_COMMA"
 WHEN #TKN_LP:RETURN "#TKN_LP"
 WHEN #TKN_RP:RETURN "#TKN_RP"
 WHEN #TKN_LB:RETURN "#TKN_LB"
 WHEN #TKN_RB:RETURN "#TKN_RB"
 WHEN #TKN_SEMI:RETURN "#TKN_SEMI"
 WHEN #TKN_COL:RETURN "#TKN_COL"
 WHEN #TKN_NEWLINE:RETURN "#TKN_NEWLINE"
 WHEN #TKN_:RETURN "#TKN_"
 WHEN #TKN_:RETURN "#TKN_"
 WHEN #TKN_:RETURN "#TKN_"
 WHEN #TKN_EOF:RETURN "#TKN_EOF"
 OTHERWISE
  RETURN STR$(T)
 ENDCASE
END
VAR LEXER_TKN
VAR LEXER_EOF
DEF INIT_LEXER IN$
 LEXER_I=0
 LEXER_EOF=#FALSE
 LEXER_IN$=IN$
END
DEF EMPTY OUT A
 RETURN A
END
DEF IS_NUM(C)
 RETURN C>=48&&C<=57
END
DEF IS_ALPHA(C)
 RETURN (C>=65&&C<=90)||(C>=97&&C<=122)
END
DEF TO_UPPER$(S$)
 VAR I
 VAR NS$=COPY(S$)
 FOR I=0TO LAST(S$)
  VAR C=ASC(S$[I])
  IF C>=97&&C<=122THEN
   NS$[I]=CHR$(C-97+65)
  ENDIF
 NEXT
 RETURN NS$
END
DEF LEX_CUR OUT T,V
 T=LEXER_TKN
 V=LEXER_VAL
END
DEF LEX_NEXT OUT T,V
 LEX_NEXT_IMPL
 LEX_CUR OUT T,V
 '?TKN_STR$(T)
 '??V
END
DEF LEX_NEXT_IMPL
 VAR C$,C
 LEXER_TKN=#TKN_NONE
 LEXER_VAL=EMPTY()
 FOR LEXER_I=LEXER_I TO LAST(LEXER_IN$)
  C$=LEXER_IN$[LEXER_I]
  C=ASC(C$)
  IF C==13||C==10THEN
   LEXER_TKN=#TKN_NEWLINE
   CONTINUE
  ENDIF
  IF C==32||C==9THEN
   CONTINUE
  ENDIF
  BREAK
 NEXT
 IF LEXER_I>=LEN(LEXER_IN$)THEN
  LEXER_TKN=#TKN_EOF
  RETURN
 ENDIF
 CASE C$
 WHEN "+"
  INC LEXER_I
  LEXER_TKN=#TKN_PLUS
 WHEN "-"
  INC LEXER_I
  LEXER_TKN=#TKN_MINUS
 WHEN "*"
  INC LEXER_I
  LEXER_TKN=#TKN_MUL
 WHEN "/"
  INC LEXER_I
  LEXER_TKN=#TKN_DIV
 WHEN ","
  INC LEXER_I
  LEXER_TKN=#TKN_COMMA
 WHEN "("
  INC LEXER_I
  LEXER_TKN=#TKN_LP
 WHEN ")"
  INC LEXER_I
  LEXER_TKN=#TKN_RP
 WHEN "["
  INC LEXER_I
  LEXER_TKN=#TKN_LB
 WHEN "]"
  INC LEXER_I
  LEXER_TKN=#TKN_RB
 WHEN ";"
  INC LEXER_I
  LEXER_TKN=#TKN_SEMI
 WHEN ":"
  INC LEXER_I
  LEXER_TKN=#TKN_COL
 WHEN "?"
  INC LEXER_I
  LEXER_TKN=#TKN_PRINT
 ENDCASE
 IF LEXER_TKN!=#TKN_NONE THEN
  RETURN
 ENDIF
 VAR SI=LEXER_I
 IF IS_NUM(C) THEN
  'n.nEn
  VAR HAS_POINT,HAS_EXP
  FOR LEXER_I=LEXER_I TO LAST(LEXER_IN$)
   C$=LEXER_IN$[LEXER_I]
   C=ASC(C$)
   IF!HAS_EXP&&!HAS_POINT&&C$=="."THEN
    HAS_POINT=#TRUE
    CONTINUE
   ENDIF
   IF !HAS_EXP&&C$=="E"||C$=="e"THEN
    HAS_EXP=#TRUE
    CONTINUE
   ENDIF
   IF IS_NUM(C)THEN
    CONTINUE
   ENDIF
   BREAK
  NEXT
  LEXER_TKN=#TKN_NUM
  LEXER_VAL=VAL(MID$(LEXER_IN$,SI,LEXER_I-SI))
  RETURN
 ELSEIF IS_ALPHA(C)||C$=="_"THEN
  FOR LEXER_I=LEXER_I TO LAST(LEXER_IN$)
   C$=LEXER_IN$[LEXER_I]
   C=ASC(C$)
   IF IS_ALPHA(C)||C$=="_"||IS_NUM(C)THEN
    CONTINUE
   ENDIF
   BREAK
  NEXT
  LEXER_VAL=MID$(LEXER_IN$,SI,LEXER_I-SI)
  LEXER_TKN=LEX_RECOG_IDEN(LEXER_VAL)
  RETURN
 ENDIF
 ?"Synt
 STOP
END
DEF LEX_RECOG_IDEN(V)
 CASE TO_UPPER$(V)
 WHEN "PRINT"
  RETURN #TKN_PRINT
 WHEN "DIV"
  RETURN #TKN_DIVINT
 OTHERWISE
  RETURN #TKN_IDEN
 ENDCASE
END

ENUM\
 #VMT_DEFAULT,\
 #VMT_INT,\
 #VMT_REAL,\
 #VMT_STR,\
 #VMT_LAST
ENUM\
 #VM_NOP,\
 #VM_PUSHINT,\
 #VM_PUSHDBL,\
 #VM_PUSHSTR,\
 #VM_BINOP,\
 #VM_PRINT_E,\
 #VM_PRINT,\
 #VM_PRINT_COMMA,\
 #VM_PRINT_SEMI,\
 #VM_,\
 #VM_LAST



DIM AST_TYP[]
DIM AST%[]
DIM AST#[]
DIM AST$[]
DIM AST_LEFT[]
DIM AST_RIGHT[]
DIM AST_NEXT[]
DIM AST_PREV[]
DIM AST_A1[]
DIM AST_A2[]
DIM AST_A3[]
DEF INIT_AST
 VAR S=1
 AST_TYP=ARRAY%(S)
 AST%=ARRAY%(S)
 AST#=ARRAY#(S)
 AST$=ARRAY$(S)
 AST_LEFT=ARRAY%(S)
 AST_NEXT=ARRAY%(S)
 AST_RIGHT=ARRAY%(S)
 AST_PREV=ARRAY%(S)
 AST_A1=ARRAY%(S)
 AST_A2=ARRAY%(S)
 AST_A3=ARRAY%(S)
END

'BINOP:AST%-TKN
ENUM\
 #AST_ITEM,\
 #AST_BINOP,\
 #AST_PRINT,\
 #AST_IMM_INT,\
 #AST_IMM_DBL,\
 #AST_IMM_STR,\
 #AST_STATEMENTS,\
 #AST_PRINT_EXPR_NEWLINE,\
 #AST_PRINT_EXPR_COMMA,\
 #AST_PRINT_EXPR_SEMI,\
 #AST_LAST
DEF NEW_AST(TYP)
 PUSH AST_TYP,TYP
 VAR E$
 PUSH AST%,0
 PUSH AST#,0
 PUSH AST$,E$
 PUSH AST_LEFT,0
 PUSH AST_RIGHT,0
 PUSH AST_NEXT,0
 PUSH AST_PREV,0
 PUSH AST_A1,0
 PUSH AST_A2,0
 PUSH AST_A3,0
 RETURN LAST(AST_TYP)
END

DEF NEW_AST_LR(TYP,L,R)
 VAR A=NEW_AST(TYP)
 AST_LEFT[A]=L
 AST_RIGHT[A]=R
 RETURN A
END

DEF NEW_AST_APPEND(TYP,PREV)
 VAR A=NEW_AST(TYP)
 AST_PREV[A]=PREV
 AST_NEXT[PREV]=LAST(AST_TYP)
 RETURN LAST(AST_TYP)
END

DEF NEW_AST_INT(TYP,V%)
 VAR A=NEW_AST(TYP)
 AST%[A]=V%
 RETURN A
END

DEF NEW_AST_DBL(TYP,V#)
 VAR A=NEW_AST(TYP)
 AST#[A]=V#
 RETURN A
END
DEF NEW_AST_STR(TYP,V$)
 VAR A=NEW_AST(TYP)
 AST$[A]=V$
 RETURN A
END

DEF AST_IND IND
 ?" "*IND;
END
DEF DUMP_AST A,IND
 VAR I
 CASE AST_TYP[A]
 WHEN #AST_STATEMENTS
  AST_IND IND:?"STATEMENTS"
  I=AST_NEXT[AST_LEFT[A]]
  WHILE I
   IF!I THEN BREAK
   DUMP_AST AST_LEFT[I],IND+1
   I=AST_NEXT[I]
  WEND
 WHEN #AST_PRINT
  AST_IND IND:?"PRINT"
  INC IND
  I=AST_NEXT[AST_LEFT[A]]
  WHILE I
   IF!I THEN BREAK
   CASE AST_TYP[I]
   WHEN #AST_PRINT_EXPR_COMMA
    AST_IND IND:?"PRINT COMMA"
   WHEN #AST_PRINT_EXPR_NEWLINE
    AST_IND IND:?"PRINT NEWLINE"
   WHEN #AST_PRINT_EXPR_SEMI
    AST_IND IND:?"PRINT SEMI"
   ENDCASE
   DUMP_AST AST_LEFT[I],IND+1
   I=AST_NEXT[I]
  WEND
 WHEN #AST_BINOP
  AST_IND IND:?"BINOP ";TKN_STR$(AST%[A])
  DUMP_AST AST_LEFT[A],IND+1
  DUMP_AST AST_RIGHT[A],IND+1
 WHEN #AST_IMM_INT
  AST_IND IND:?"INT ";AST%[A]
 WHEN #AST_IMM_DBL
  AST_IND IND:?"DOUBLE ";AST#[A]
 WHEN #AST_IMM_STR
  AST_IND IND:?"STR ";AST$[A]
 OTHERWISE
  AST_IND IND:?"#AST",AST_TYP[A]
 ENDCASE
END

DEF PARSE()
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 'ROOTのLEFTにAST_ITEMのりんくりすとがはいる
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_EOF THEN RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_STATEMENT()
 VAR T,V
 LEX_CUR OUT T,V
 CASE T
 WHEN #TKN_PRINT
  RETURN PARSE_PRINT()
 WHEN #TKN_EOF
 WHEN #TKN_NEWLINE
  RETURN
 OTHERWISE
  SYNTAX_ERROR
 ENDCASE
END
DEF IS_EXPR_TKN(T)
 CASE T
 WHEN #TKN_NUM
 WHEN #TKN_STR
 WHEN #TKN_IDEN
 WHEN #TKN_LP
 WHEN #TKN_MINUS
  RETURN #TRUE
 ENDCASE
 RETURN #FALSE
END
DEF PARSE_PRINT()
 VAR T,V
 VAR AST=NEW_AST(#AST_PRINT)
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[AST]=PRV
 LEX_NEXT OUT T,V
 IF !IS_EXPR_TKN(T)THEN
  ?"PRINT_E"
'   EMIT_PRINT_E
  RETURN AST
 ENDIF
 WHILE 1
  VAR EXPR=PARSE_EXPR()
  LEX_CUR OUT T,V
  VAR A
  IF T==#TKN_COMMA THEN
   ?"PRINT_COMMA"
   A=NEW_AST(#AST_PRINT_EXPR_COMMA)
   LEX_NEXT OUT ,
'   EMIT_PRINT_COMMA
  ELSEIF T==#TKN_SEMI THEN
   ?"PRINT_SEMI"
   A=NEW_AST(#AST_PRINT_EXPR_SEMI)
   LEX_NEXT OUT ,
'   EMIT_PRINT_SEMI
  ELSE
   ?"PRINT"
   A=NEW_AST(#AST_PRINT_EXPR_NEWLINE)
'   EMIT_PRINT
  ENDIF
  AST_LEFT[A]=EXPR
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
  LEX_CUR OUT T,V
  IF !IS_EXPR_TKN(T)THEN
   RETURN AST
  ENDIF
 WEND
END
DEF PARSE_TERM()
 VAR T,V
 LEX_CUR OUT T,V
 VAR AST
 CASE T
 WHEN #TKN_MINUS
  PARSE_TERM
  ?"MINUS UNARY"
 'FIXME:EXPND CONST EXPR
 WHEN #TKN_NUM
  ?"IMM",V
  IF TYPEOF(V)==#T_INT THEN
   AST=NEW_AST_INT(#AST_IMM_INT,V)
'   EMIT_PUSHINT V
  ELSEIF TYPEOF(V)==#T_REAL THEN
   AST=NEW_AST_DBL(#AST_IMM_DBL,V)
'   EMIT_PUSHDBL V
  ELSE
   STOP
  ENDIF
 WHEN #TKN_STR
  ?"IMM",V
'  EMIT_PUSHSTR V
   AST=NEW_AST_STR(#AST_IMM_STR,V)
 OTHERWISE
  SYNTAX_ERROR
 ENDCASE
 LEX_NEXT OUT T,V
 RETURN AST
END
ENUM\
 #OPRANK_NOTANOP,\
 #OPRANK_MIN,\
 #OPRANK_PARENT,\
 #OPRANK_MUL,\
 #OPRANK_PLUS,\
 #OPRANK_SHIFT,\
 #OPRANK_EQ,\
 #OPRANK_BIT,\
 #OPRANK_LOG,\
 #OPRANK_MAX
DEF GET_OP_RANK(T)
 CASE T
 WHEN #TKN_LP
 WHEN #TKN_LB
  RETURN #OPRANK_PARENT
 WHEN #TKN_MUL
 WHEN #TKN_DIV
 WHEN #TKN_DIVINT
 WHEN #TKN_MOD
  RETURN #OPRANK_MUL
 WHEN #TKN_PLUS
 WHEN #TKN_MINUS
  RETURN #OPRANK_PLUS
 WHEN #TKN_LSHIFT
 WHEN #TKN_RSHIFT
  RETURN #OPRANK_SHIFT
 WHEN #TKN_EQ
 WHEN #TKN_NEQ
 WHEN #TKN_LESS
 WHEN #TKN_LEQ
 WHEN #TKN_GREAT
 WHEN #TKN_GEQ
  RETURN #OPRANK_EQ
 WHEN #TKN_AND
 WHEN #TKN_OR
 WHEN #TKN_XOR
  RETURN #OPRANK_BIT
 WHEN #TKN_LAND
 WHEN #TKN_LOR
  RETURN #OPRANK_LOG
 ENDCASE
 RETURN #OPRANK_NOTANOP
END
DEF PARSE_EXPR()
 RETURN PARSE_EXPR0(#OPRANK_MAX)
END
DEF PARSE_EXPR0(RANK)
 IF RANK==#OPRANK_MIN THEN
  RETURN PARSE_TERM()
 ENDIF
 VAR T,V
 VAR LEFT=PARSE_EXPR0(RANK-1)
 LOOP
  LEX_CUR OUT T,V
  IF GET_OP_RANK(T)==RANK THEN
   LEX_NEXT OUT ,
   VAR RIGHT=PARSE_EXPR0(RANK-1)
   ?"BINARY OP",TKN_STR$(T)
   LEFT=NEW_AST_LR(#AST_BINOP,LEFT,RIGHT)
   AST%[LEFT]=T
'   EMIT_BINOP T
   CONTINUE
  ENDIF
  BREAK
 ENDLOOP
 RETURN LEFT
END

DEF INIT_COMPILER
END
DEF COMPILE AST
 COMPILE_STATEMENTS AST
END
DEF COMPILE_STATEMENTS A
 VAR I
 CASE AST_TYP[A]
 WHEN #AST_STATEMENTS
  I=AST_NEXT[AST_LEFT[A]]
  WHILE I
   IF!I THEN BREAK
   COMPILE_STATEMENT AST_LEFT[I]
   I=AST_NEXT[I]
  WEND
 OTHERWISE
  COMPILE_ERROR
 ENDCASE
END
DEF COMPILE_STATEMENT A
 VAR I
 CASE AST_TYP[A]
 WHEN #AST_PRINT
  I=AST_NEXT[AST_LEFT[A]]
  IF !I THEN
   EMIT_PRINT_E
  ENDIF
  WHILE I
   IF!I THEN BREAK
   COMPILE_EXPR AST_LEFT[I]
   CASE AST_TYP[I]
   WHEN #AST_PRINT_EXPR_COMMA
    EMIT_PRINT_COMMA
   WHEN #AST_PRINT_EXPR_NEWLINE
    EMIT_PRINT
   WHEN #AST_PRINT_EXPR_SEMI
    EMIT_PRINT_SEMI
   ENDCASE
   I=AST_NEXT[I]
  WEND
 OTHERWISE
  COMPILE_ERROR
 ENDCASE
END
DEF COMPILE_EXPR A
 CASE AST_TYP[A]
 WHEN #AST_BINOP
  COMPILE_EXPR AST_LEFT[A]
  COMPILE_EXPR AST_RIGHT[A]
  EMIT_BINOP AST%[A]
 WHEN #AST_IMM_INT
  EMIT_PUSHINT AST%[A]
 WHEN #AST_IMM_DBL
  EMIT_PUSHDBL AST#[A]
 WHEN #AST_IMM_STR
  EMIT_PUSHSTR AST$[A]
 OTHERWISE
  COMPILE_ERROR
 ENDCASE
END
DIM VM_OPS[]
DIM VM_IMM#[]
DIM VM_IMM$[]

DIM VM_STK_TYP[]
DIM VM_STK%[]
DIM VM_STK#[]
DIM VM_STK$[]
VAR VM_STK_SIZE
VAR VM_SP
VAR VM_BP
DEF INIT_VM
 VM_OPS=ARRAY%(0)
 VM_IMM#=ARRAY#(0)
 VM_IMM$=ARRAY$(0)
 VM_STK_SIZE=65536
 VM_STK_TYP=ARRAY%(VM_STK_SIZE)
 VM_STK%=ARRAY%(VM_STK_SIZE)
 VM_STK#=ARRAY#(VM_STK_SIZE)
 VM_STK$=ARRAY$(VM_STK_SIZE)
END
DEF EMIT_PUSHINT V
 PUSH VM_OPS,#VM_PUSHINT
 PUSH VM_OPS,V
END
DEF VM_ADDIMMDBL(V#)
 PUSH VM_IMM#,V#
 RETURN LAST(VM_IMM#)
END
DEF VM_ADDIMMSTR(V$)
 PUSH VM_IMM$,V$
 RETURN LAST(VM_IMM$)
END
DEF EMIT_PUSHDBL V#
 PUSH VM_OPS,#VM_PUSHDBL
 PUSH VM_OPS,VM_ADDIMMDBL(V#)
END
DEF EMIT_PUSHSTR V$
 PUSH VM_OPS,#VM_PUSHSTR
 PUSH VM_OPS,VM_ADDIMMSTR(V$)
END
DEF EMIT_BINOP TYP
 PUSH VM_OPS,#VM_BINOP
 PUSH VM_OPS,TYP
END
DEF EMIT_PRINT
 PUSH VM_OPS,#VM_PRINT
END
DEF EMIT_PRINT_E
 PUSH VM_OPS,#VM_PRINT_E
END
DEF EMIT_PRINT_COMMA
 PUSH VM_OPS,#VM_PRINT_COMMA
END
DEF EMIT_PRINT_SEMI
 PUSH VM_OPS,#VM_PRINT_COMMA
END
DEF VM_PUSHINT V%
 VM_STK_TYP[VM_SP]=#VMT_INT
 VM_STK%[VM_SP]=V%
 INC VM_SP
END
DEF VM_PUSHDBL V#
 VM_STK_TYP[VM_SP]=#VMT_REAL
 VM_STK#[VM_SP]=V#
 INC VM_SP
END
DEF VM_PUSHSTR V$
 VM_STK_TYP[VM_SP]=#VMT_STR
 VM_STK$[VM_SP]=V$
 INC VM_SP
END
DEF VM_PUSH V
 CASE TYPEOF(V)
 WHEN #T_INT
  VM_STK_TYP[VM_SP]=#VMT_INT
  VM_STK%[VM_SP]=V
 WHEN #T_REAL
  VM_STK_TYP[VM_SP]=#VMT_REAL
  VM_STK#[VM_SP]=V
 WHEN #T_STR
  VM_STK_TYP[VM_SP]=#VMT_STR
  VM_STK$[VM_SP]=V
 OTHERWISE
  STOP
 ENDCASE
 INC VM_SP
END
DEF VM_POP OUT T,V
 DEC VM_SP
 T=VM_STK_TYP[VM_SP]
 CASE T
 WHEN #VMT_INT
  V=VM_STK%[VM_SP]
 WHEN #VMT_REAL
  V=VM_STK#[VM_SP]
 WHEN #VMT_STR
  V=VM_STK$[VM_SP]
 OTHERWISE
  STOP
 ENDCASE
END
DEF VM_BINOP T
 VAR LT,LV
 VAR RT,RV
 VM_POP OUT RT,RV
 VM_POP OUT LT,LV
 CASE T
 WHEN #TKN_PLUS
  VM_PUSH LV+RV
 WHEN #TKN_MINUS
  VM_PUSH LV-RV
 WHEN #TKN_MUL
  VM_PUSH LV*RV
 WHEN #TKN_DIV
  VM_PUSH LV/RV
 WHEN #TKN_DIVINT
  VM_PUSH LV DIV RV
 OTHERWISE
  STOP
 ENDCASE
END
DEF VM_PRINT_E
 ?
END

DEF VM_PRINT
 VAR V
 VM_POP OUT ,V
 ?V
END
DEF VM_PRINT_COMMA
 VAR V
 VM_POP OUT ,V
 ?V,
END
DEF VM_PRINT_SEMI
 VAR V
 VM_POP OUT ,V
 ?V;
END
DEF VM_RUN
 VAR PC
 LOOP
  IF LEN(VM_OPS)<=PC THEN BREAK
  VAR C=VM_OPS[PC]
  INC PC
  CASE C
  WHEN #VM_PUSHINT
   VM_PUSHINT VM_OPS[PC]
   INC PC
  WHEN #VM_PUSHDBL
   VM_PUSHDBL VM_IMM#[VM_OPS[PC]]
   INC PC
  WHEN #VM_PUSHSTR
   VM_PUSHDBL COPY(VM_IMM$[VM_OPS[PC]])
   INC PC
  WHEN #VM_BINOP
   VAR T=VM_OPS[PC]
   INC PC
   VM_BINOP T
  WHEN #VM_PRINT_E
   VM_PRINT_E
  WHEN #VM_PRINT
   VM_PRINT
  WHEN #VM_PRINT_COMMA
   VM_PRINT_COMMA
  WHEN #VM_PRINT_SEMI
   VM_PRINT_SEMI
  ENDCASE
 ENDLOOP
END
