OPTION STRICT
'SPLAY_TEST
'END
MAIN
END
VAR TRACE=#FALSE
DEF GET_SLOT$(N)
 PRGEDIT N
 VAR S$=""
 VAR I,L=PRGSIZE(N)
 FOR I=1TO L
  PUSH S$,PRGGET$()
 NEXT
 RETURN S$
END
DEF MAIN
 VAR SW,SH,TS,TS2
 XSCREEN OUT SW,SH
 IF SW!=1280||SH!=720THEN
  XSCREEN 1280,720
 ENDIF
 TSCREEN OUT TS,TS2,,
 IF TS!=16||TS2!=16THEN
  TSCREEN 16
 ENDIF
 VAR IN$=GET_SLOT$(3)
 INIT_LEXER IN$
 INIT_AST
 INIT_PARSER
 VAR AST=PARSE()
 DUMP_AST AST,0
 INIT_COMPILER
 INIT_VM
 COMPILE AST
 VM_RUN
END
VAR LEXER_IN$
VAR LEXER_I
VAR LEXER_VAL
ENUM\
 #TKN_NONE,\
 #TKN_NUM,\
 #TKN_STR,\
 #TKN_PRINT,\
 #TKN_DEF,\
 #TKN_RETURN,\
 #TKN_IDEN,\
 #TKN_PLUS,\
 #TKN_MINUS,\
 #TKN_MUL,\
 #TKN_DIV,\
 #TKN_DIVINT,\
 #TKN_COMMA,\
 #TKN_LP,\
 #TKN_RP,\
 #TKN_LB,\
 #TKN_RB,\
 #TKN_SEMI,\
 #TKN_COL,\
 #TKN_NEWLINE,\
 #TKN_EOF,\
 #TKN_MOD,\
 #TKN_LSHIFT,\
 #TKN_RSHIFT,\
 #TKN_EQ,\
 #TKN_NEQ,\
 #TKN_LESS,\
 #TKN_LEQ,\
 #TKN_GREAT,\
 #TKN_GEQ,\
 #TKN_AND,\
 #TKN_OR,\
 #TKN_XOR,\
 #TKN_LAND,\
 #TKN_LOR,\
 #TKN_ASSIGN,\
 #TKN_NOT,\
 #TKN_LNOT,\
 #TKN_OUT,\
 #TKN_CALL,\
 #TKN_VAR,\
 #TKN_DIM,\
 #TKN_IF,\
 #TKN_THEN,\
 #TKN_ENDIF,\
 #TKN_ELSE,\
 #TKN_ELSEIF,\
 #TKN_FOR,\
 #TKN_NEXT,\
 #TKN_GOTO,\
 #TKN_GOSUB,\
 #TKN_BREAK,\
 #TKN_CONTINUE,\
 #TKN_WHILE,\
 #TKN_WEND,\
 #TKN_REPEAT,\
 #TKN_UNTIL,\
 #TKN_LOOP,\
 #TKN_ENDLOOP,\
 #TKN_LABEL,\
 #TKN_ON,\
 #TKN_DATA,\
 #TKN_RESTORE,\
 #TKN_CONST,\
 #TKN_ENUM,\
 #TKN_CONSTVAR,\
 #TKN_END,\
 #TKN_TPRINT,\
 #TKN_READ,\
 #TKN_,\
 #TKN_LAST
DEF TKN_STR$(T)
 CASE T
WHEN #TKN_NONE:RETURN "#TKN_NONE"WHEN #TKN_NUM:RETURN "#TKN_NUM"WHEN #TKN_STR:RETURN "#TKN_STR"WHEN #TKN_PRINT:RETURN "#TKN_PRINT"WHEN #TKN_DEF:RETURN "#TKN_DEF"WHEN #TKN_RETURN:RETURN "#TKN_RETURN"WHEN #TKN_IDEN:RETURN "#TKN_IDEN"WHEN #TKN_PLUS:RETURN "#TKN_PLUS"WHEN #TKN_MINUS:RETURN "#TKN_MINUS"WHEN #TKN_MUL:RETURN "#TKN_MUL"WHEN #TKN_DIV:RETURN "#TKN_DIV"WHEN #TKN_DIVINT:RETURN "#TKN_DIVINT"WHEN #TKN_COMMA:RETURN "#TKN_COMMA"WHEN #TKN_LP:RETURN "#TKN_LP"WHEN #TKN_RP:RETURN "#TKN_RP"WHEN #TKN_LB:RETURN "#TKN_LB"WHEN #TKN_RB:RETURN "#TKN_RB"WHEN #TKN_SEMI:RETURN "#TKN_SEMI"WHEN #TKN_COL:RETURN "#TKN_COL"WHEN #TKN_NEWLINE:RETURN "#TKN_NEWLINE"WHEN #TKN_EOF:RETURN "#TKN_EOF"WHEN #TKN_MOD:RETURN "#TKN_MOD"WHEN #TKN_LSHIFT:RETURN "#TKN_LSHIFT"WHEN #TKN_RSHIFT:RETURN "#TKN_RSHIFT"WHEN #TKN_EQ:RETURN "#TKN_EQ"WHEN #TKN_NEQ:RETURN "#TKN_NEQ"WHEN #TKN_LESS:RETURN "#TKN_LESS"WHEN #TKN_LEQ:RETURN "#TKN_LEQ"WHEN #TKN_GREAT:RETURN "#TKN_GREAT"WHEN #TKN_GEQ:RETURN "#TKN_GEQ"WHEN #TKN_AND:RETURN "#TKN_AND"WHEN #TKN_OR:RETURN "#TKN_OR"WHEN #TKN_XOR:RETURN "#TKN_XOR"WHEN #TKN_LAND:RETURN "#TKN_LAND"WHEN #TKN_LOR:RETURN "#TKN_LOR"WHEN #TKN_ASSIGN:RETURN "#TKN_ASSIGN"WHEN #TKN_NOT:RETURN "#TKN_NOT"WHEN #TKN_LNOT:RETURN "#TKN_LNOT"WHEN #TKN_OUT:RETURN "#TKN_OUT"WHEN #TKN_CALL:RETURN "#TKN_CALL"WHEN #TKN_VAR:RETURN "#TKN_VAR"WHEN #TKN_DIM:RETURN "#TKN_DIM"WHEN #TKN_IF:RETURN "#TKN_IF"WHEN #TKN_THEN:RETURN "#TKN_THEN"WHEN #TKN_ENDIF:RETURN "#TKN_ENDIF"WHEN #TKN_ELSE:RETURN "#TKN_ELSE"WHEN #TKN_ELSEIF:RETURN "#TKN_ELSEIF"WHEN #TKN_FOR:RETURN "#TKN_FOR"WHEN #TKN_NEXT:RETURN "#TKN_NEXT"WHEN #TKN_GOTO:RETURN "#TKN_GOTO"WHEN #TKN_GOSUB:RETURN "#TKN_GOSUB"WHEN #TKN_BREAK:RETURN "#TKN_BREAK"WHEN #TKN_CONTINUE:RETURN "#TKN_CONTINUE"WHEN #TKN_WHILE:RETURN "#TKN_WHILE"WHEN #TKN_WEND:RETURN "#TKN_WEND"WHEN #TKN_REPEAT:RETURN "#TKN_REPEAT"WHEN #TKN_UNTIL:RETURN "#TKN_UNTIL"WHEN #TKN_LOOP:RETURN "#TKN_LOOP"WHEN #TKN_ENDLOOP:RETURN "#TKN_ENDLOOP"WHEN #TKN_LABEL:RETURN "#TKN_LABEL"WHEN #TKN_ON:RETURN "#TKN_ON"WHEN #TKN_DATA:RETURN "#TKN_DATA"WHEN #TKN_RESTORE:RETURN "#TKN_RESTORE"WHEN #TKN_CONST:RETURN "#TKN_CONST"WHEN #TKN_ENUM:RETURN "#TKN_ENUM"WHEN #TKN_CONSTVAR:RETURN "#TKN_CONSTVAR"WHEN #TKN_:RETURN "#TKN_"WHEN #TKN_LAST:RETURN "#TKN_LAST"

 OTHERWISE
  RETURN STR$(T)
 ENDCASE
END
VAR LEXER_TKN
VAR LEXER_EOF
DEF INIT_LEXER IN$
 LEXER_I=0
 LEXER_EOF=#FALSE
 LEXER_IN$=IN$
END
DEF EMPTY OUT A
 RETURN A
END
DEF IS_NUM(C)
 RETURN C>=48&&C<=57
END
DEF IS_ALPHA(C)
 RETURN (C>=65&&C<=90)||(C>=97&&C<=122)
END
DEF TO_UPPER$(S$)
 VAR I
 VAR NS$=COPY(S$)
 FOR I=0TO LAST(S$)
  VAR C=ASC(S$[I])
  IF C>=97&&C<=122THEN
   NS$[I]=CHR$(C-97+65)
  ENDIF
 NEXT
 RETURN NS$
END
DEF LEX_CUR OUT T,V
 T=LEXER_TKN
 V=LEXER_VAL
END
DEF LEX_NEXT OUT T,V
 LEX_NEXT_IMPL
 LEX_CUR OUT T,V
' ?TKN_STR$(T)
' ??V
END
DEF LEX_SAVE OUT I,T,V
 I=LEXER_I
 T=LEXER_TKN
 V=LEXER_VAL
END
DEF LEX_LOAD I,T,V
 LEXER_I=I
 LEXER_TKN=T
 LEXER_VAL=V
END
DEF IS_VARSUFFIX(C$)
 CASE C$
 WHEN "$":WHEN "#":WHEN "%":RETURN #TRUE
 OTHERWISE RETURN #FALSE
 ENDCASE
END
DEF LEX_NEXT_IMPL
 @LOOP
 VAR C$,C
 LEXER_TKN=#TKN_NONE
 LEXER_VAL=EMPTY()
 FOR LEXER_I=LEXER_I TO LAST(LEXER_IN$)
  C$=LEXER_IN$[LEXER_I]
  C=ASC(C$)
  IF C==13||C==10THEN
   LEXER_TKN=#TKN_NEWLINE
   CONTINUE
  ENDIF
  IF C==32||C==9THEN
   CONTINUE
  ENDIF
  BREAK
 NEXT
 IF LEXER_I>=LEN(LEXER_IN$)THEN
  LEXER_TKN=#TKN_EOF
  RETURN
 ENDIF
 IF LEXER_TKN!=#TKN_NONE THEN
  RETURN
 ENDIF
  VAR N$=MID$(LEXER_IN$,LEXER_I+1,1)
 VAR SI=LEXER_I
 CASE C$
 WHEN "+"
  INC LEXER_I
  LEXER_TKN=#TKN_PLUS
 WHEN "-"
  INC LEXER_I
  LEXER_TKN=#TKN_MINUS
 WHEN "*"
  INC LEXER_I
  LEXER_TKN=#TKN_MUL
 WHEN "/"
  INC LEXER_I
  LEXER_TKN=#TKN_DIV
 WHEN ","
  INC LEXER_I
  LEXER_TKN=#TKN_COMMA
 WHEN "("
  INC LEXER_I
  LEXER_TKN=#TKN_LP
 WHEN ")"
  INC LEXER_I
  LEXER_TKN=#TKN_RP
 WHEN "["
  INC LEXER_I
  LEXER_TKN=#TKN_LB
 WHEN "]"
  INC LEXER_I
  LEXER_TKN=#TKN_RB
 WHEN ";"
  INC LEXER_I
  LEXER_TKN=#TKN_SEMI
 WHEN ":"
  INC LEXER_I
  LEXER_TKN=#TKN_COL
 WHEN "?"
  INC LEXER_I
  LEXER_TKN=#TKN_PRINT
 WHEN "!"
  INC LEXER_I
  IF N$=="="THEN
   INC LEXER_I
   LEXER_TKN=#TKN_NEQ
  ELSE
   LEXER_TKN=#TKN_LNOT
  ENDIF
 WHEN "="
  INC LEXER_I
  IF N$=="="THEN
   INC LEXER_I
   LEXER_TKN=#TKN_EQ
  ELSE
   LEXER_TKN=#TKN_ASSIGN
  ENDIF
 WHEN "<"
  INC LEXER_I
  IF N$=="="THEN
   INC LEXER_I
   LEXER_TKN=#TKN_LEQ
  ELSEIF N$=="<"THEN
   INC LEXER_I
   LEXER_TKN=#TKN_LSHIFT
  ELSE
   LEXER_TKN=#TKN_LESS
  ENDIF
 WHEN ">"
  INC LEXER_I
  IF N$=="="THEN
   INC LEXER_I
   LEXER_TKN=#TKN_GEQ
  ELSEIF N$==">"THEN
   INC LEXER_I
   LEXER_TKN=#TKN_RSHIFT
  ELSE
   LEXER_TKN=#TKN_GREAT
  ENDIF
 WHEN "&"
  IF N$=="&"THEN
   INC LEXER_I,2
   LEXER_TKN=#TKN_LAND
  ELSEIF N$=="H"||N$=="h"THEN
   FOR LEXER_I=LEXER_I+2 TO LAST(LEXER_IN$)
    C$=LEXER_IN$[LEXER_I]
    C=ASC(C$)
    IF IS_NUM(C)||(C$>="A"&&C$<="F")||(C$>="a"&&C$<="f")THEN
     CONTINUE
    ENDIF
    BREAK
   NEXT
   LEXER_TKN=#TKN_NUM
   LEXER_VAL=VAL(MID$(LEXER_IN$,SI,LEXER_I-SI))
   RETURN
  ELSEIF N$=="B"||N$=="b"THEN
   FOR LEXER_I=LEXER_I+2 TO LAST(LEXER_IN$)
    C$=LEXER_IN$[LEXER_I]
    IF C$>="0"&&C$<="1"THEN
     CONTINUE
    ENDIF
    BREAK
   NEXT
   LEXER_TKN=#TKN_NUM
   LEXER_VAL=VAL(MID$(LEXER_IN$,SI,LEXER_I-SI))
   RETURN
  ENDIF
 WHEN "|"
  IF N$=="|"THEN
   INC LEXER_I,2
   LEXER_TKN=#TKN_LOR
  ENDIF
 ENDCASE
 IF LEXER_TKN!=#TKN_NONE THEN
  RETURN
 ENDIF
 IF IS_NUM(C) THEN
  'n.nEn
  VAR HAS_POINT,HAS_EXP
  FOR LEXER_I=LEXER_I TO LAST(LEXER_IN$)
   C$=LEXER_IN$[LEXER_I]
   C=ASC(C$)
   IF!HAS_EXP&&!HAS_POINT&&C$=="."THEN
    HAS_POINT=#TRUE
    CONTINUE
   ENDIF
   IF !HAS_EXP&&C$=="E"||C$=="e"THEN
    HAS_EXP=#TRUE
    CONTINUE
   ENDIF
   IF IS_NUM(C)THEN
    CONTINUE
   ENDIF
   BREAK
  NEXT
  LEXER_TKN=#TKN_NUM
  LEXER_VAL=VAL(MID$(LEXER_IN$,SI,LEXER_I-SI))
  RETURN
 ELSEIF C$=="#"||C$=="@"||IS_ALPHA(C)||C$=="_"THEN
  VAR ISLBL=C$=="@"
  VAR ISCNST=C$=="#"
  VAR ADD1=ISLBL||ISCNST
  FOR LEXER_I=LEXER_I+ADD1 TO LAST(LEXER_IN$)
   C$=LEXER_IN$[LEXER_I]
   C=ASC(C$)
   IF IS_ALPHA(C)||C$=="_"||IS_NUM(C)THEN
    CONTINUE
   ENDIF
   BREAK
  NEXT
  IF !ISLBL&&IS_VARSUFFIX(MID$(LEXER_IN$,LEXER_I,1))THEN
   INC LEXER_I
  ENDIF
  LEXER_VAL=MID$(LEXER_IN$,SI,LEXER_I-SI)
  LEXER_VAL=TO_UPPER$(LEXER_VAL)
  IF ISLBL THEN
   LEXER_TKN=#TKN_LABEL
  ELSEIF ISCNST THEN
   LEXER_TKN=#TKN_CONSTVAR
  ELSE
   LEXER_TKN=LEX_RECOG_IDEN(LEXER_VAL)
  ENDIF
  RETURN
 ELSEIF C==34 THEN'STRING
  LEXER_VAL=""
  FOR LEXER_I=LEXER_I+1 TO LAST(LEXER_IN$)
   C$=LEXER_IN$[LEXER_I]
   C=ASC(C$)
   IF C==34||C==10||C==13 THEN
    IF C==34 THEN INC LEXER_I
    BREAK
   ENDIF
   PUSH LEXER_VAL,C$
  NEXT
  LEXER_TKN=#TKN_STR
  RETURN
 ELSEIF C$=="'"THEN
  FOR LEXER_I=LEXER_I+1 TO LAST(LEXER_IN$)
   C$=LEXER_IN$[LEXER_I]
   C=ASC(C$)
   IF C==10 THEN BREAK
  NEXT
  GOTO @LOOP
 ELSEIF C$=="\"THEN
  IF ASC(N$)==10 THEN
   INC LEXER_I,2
   GOTO @LOOP
  ENDIF
 ENDIF
 ?"Synt
 STOP
END
DEF LEX_RECOG_IDEN(V)
 CASE TO_UPPER$(V)
 WHEN "PRINT"
  RETURN #TKN_PRINT
 WHEN "DIV"
  RETURN #TKN_DIVINT
 WHEN "MOD"
  RETURN #TKN_MOD
 WHEN "AND"
  RETURN #TKN_AND
 WHEN "OR"
  RETURN #TKN_OR
 WHEN "XOR"
  RETURN #TKN_XOR
 WHEN "NOT"
  RETURN #TKN_NOT
 WHEN "OUT"
  RETURN #TKN_OUT
 WHEN "CALL"
  RETURN #TKN_CALL
 WHEN "DIM"
 WHEN "VAR"
  RETURN #TKN_VAR
 WHEN "DIM"
  RETURN #TKN_DIM
 WHEN "IF"
  RETURN #TKN_IF
 WHEN "THEN"
  RETURN #TKN_THEN
 WHEN "ENDIF"
  RETURN #TKN_ENDIF
 WHEN "ELSE"
  RETURN #TKN_ELSE
 WHEN "ELSEIF"
  RETURN #TKN_ELSEIF
 WHEN "FOR"
  RETURN #TKN_FOR
 WHEN "NEXT"
  RETURN #TKN_NEXT
 WHEN "GOTO"
  RETURN #TKN_GOTO
 WHEN "GOSUB"
  RETURN #TKN_GOSUB
 WHEN "BREAK"
  RETURN #TKN_BREAK
 WHEN "CONTINUE"
  RETURN #TKN_CONTINUE
 WHEN "REPEAT"
  RETURN #TKN_REPEAT
 WHEN "UNTIL"
  RETURN #TKN_UNTIL
 WHEN "WHILE"
  RETURN #TKN_WHILE
 WHEN "WEND"
  RETURN #TKN_WEND
 WHEN "REPEAT"
  RETURN #TKN_REPEAT
 WHEN "UNTIL"
  RETURN #TKN_UNTIL
 WHEN "LOOP"
  RETURN #TKN_LOOP
 WHEN "ENDLOOP"
  RETURN #TKN_ENDLOOP
 WHEN "RETURN"
  RETURN #TKN_RETURN
 WHEN "DATA"
  RETURN #TKN_DATA
 WHEN "RESTORE"
  RETURN #TKN_RESTORE
 WHEN "CONST"
  RETURN #TKN_CONST
 WHEN "ENUM"
  RETURN #TKN_ENUM
 WHEN "DEF"
  RETURN #TKN_DEF
 WHEN "END"
  RETURN #TKN_END
 WHEN "TPRINT"
  RETURN #TKN_TPRINT
 WHEN "READ"
  RETURN #TKN_READ
 OTHERWISE
  RETURN #TKN_IDEN
 ENDCASE
END



DIM AST_TYP[]
DIM AST%[]
DIM AST#[]
DIM AST$[]
DIM AST_LEFT[]
DIM AST_RIGHT[]
DIM AST_NEXT[]
DIM AST_PREV[]
DIM AST_A1[]
DIM AST_A2[]
DIM AST_A3[]
DIM AST_A4[]
DIM AST_A5[]
DEF INIT_AST
 VAR S=1
 AST_TYP=ARRAY%(S)
 AST%=ARRAY%(S)
 AST#=ARRAY#(S)
 AST$=ARRAY$(S)
 AST_LEFT=ARRAY%(S)
 AST_NEXT=ARRAY%(S)
 AST_RIGHT=ARRAY%(S)
 AST_PREV=ARRAY%(S)
 AST_A1=ARRAY%(S)
 AST_A2=ARRAY%(S)
 AST_A3=ARRAY%(S)
 AST_A4=ARRAY%(S)
 AST_A5=ARRAY%(S)
END

'BINOP:AST%-TKN
ENUM\
 #AST_ITEM,\
 #AST_BINOP,\
 #AST_UNAOP,\
 #AST_PRINT,\
 #AST_IMM_INT,\
 #AST_IMM_DBL,\
 #AST_IMM_STR,\
 #AST_STATEMENTS,\
 #AST_PRINT_EXPR_NEWLINE,\
 #AST_PRINT_EXPR_COMMA,\
 #AST_PRINT_EXPR_SEMI,\
 #AST_ASSIGN,\
 #AST_VAR,\
 #AST_IF,\
 #AST_FOR,\
 #AST_BREAK,\
 #AST_CONTINUE,\
 #AST_WHILE,\
 #AST_REPEAT,\
 #AST_LOOP,\
 #AST_LABEL,\
 #AST_GOTO,\
 #AST_GOSUB,\
 #AST_GOTOEXPR,\
 #AST_GOSUBEXPR,\
 #AST_ONGOTO,\
 #AST_ONGOSUB,\
 #AST_ONBREAKGOTO,\
 #AST_ONBREAKGOTOEXPR,\
 #AST_RETURN,\
 #AST_RETURNFUNC,\
 #AST_CALLFUNC,\
 #AST_CALLFUNCEXPR,\
 #AST_OPTIONSTRICT,\
 #AST_OPTIONDEFINT,\
 #AST_RESTORE,\
 #AST_RESTOREEXPR,\
 #AST_DATA,\
 #AST_CONST,\
 #AST_ENUM,\
 #AST_CONSTVAR,\
 #AST_CALLSPRITE,\
 #AST_CALLTEXT,\
 #AST_ARRAYEXPR,\
 #AST_DEF,\
 #AST_END,\
 #AST_TPRINT,\
 #AST_EMPTYEXPR,\
 #AST_DEFVAR,\
 #AST_READ,\
 #AST_,\
 #AST_LAST
DEF AST_STR$(TYP)
 CASE TYP
WHEN #AST_ITEM:RETURN "#AST_ITEM"WHEN #AST_BINOP:RETURN "#AST_BINOP"WHEN #AST_UNAOP:RETURN "#AST_UNAOP"WHEN #AST_PRINT:RETURN "#AST_PRINT"WHEN #AST_IMM_INT:RETURN "#AST_IMM_INT"WHEN #AST_IMM_DBL:RETURN "#AST_IMM_DBL"WHEN #AST_IMM_STR:RETURN "#AST_IMM_STR"WHEN #AST_STATEMENTS:RETURN "#AST_STATEMENTS"WHEN #AST_PRINT_EXPR_NEWLINE:RETURN "#AST_PRINT_EXPR_NEWLINE"WHEN #AST_PRINT_EXPR_COMMA:RETURN "#AST_PRINT_EXPR_COMMA"WHEN #AST_PRINT_EXPR_SEMI:RETURN "#AST_PRINT_EXPR_SEMI"WHEN #AST_ASSIGN:RETURN "#AST_ASSIGN"WHEN #AST_VAR:RETURN "#AST_VAR"WHEN #AST_IF:RETURN "#AST_IF"WHEN #AST_FOR:RETURN "#AST_FOR"WHEN #AST_BREAK:RETURN "#AST_BREAK"WHEN #AST_CONTINUE:RETURN "#AST_CONTINUE"WHEN #AST_WHILE:RETURN "#AST_WHILE"WHEN #AST_REPEAT:RETURN "#AST_REPEAT"WHEN #AST_LOOP:RETURN "#AST_LOOP"WHEN #AST_LABEL:RETURN "#AST_LABEL"WHEN #AST_GOTO:RETURN "#AST_GOTO"WHEN #AST_GOSUB:RETURN "#AST_GOSUB"WHEN #AST_GOTOEXPR:RETURN "#AST_GOTOEXPR"WHEN #AST_GOSUBEXPR:RETURN "#AST_GOSUBEXPR"WHEN #AST_ONGOTO:RETURN "#AST_ONGOTO"WHEN #AST_ONGOSUB:RETURN "#AST_ONGOSUB"WHEN #AST_ONBREAKGOTO:RETURN "#AST_ONBREAKGOTO"WHEN #AST_ONBREAKGOTOEXPR:RETURN "#AST_ONBREAKGOTOEXPR"WHEN #AST_RETURN:RETURN "#AST_RETURN"WHEN #AST_RETURNFUNC:RETURN "#AST_RETURNFUNC"WHEN #AST_CALLFUNC:RETURN "#AST_CALLFUNC"WHEN #AST_CALLFUNCEXPR:RETURN "#AST_CALLFUNCEXPR"WHEN #AST_OPTIONSTRICT:RETURN "#AST_OPTIONSTRICT"WHEN #AST_OPTIONDEFINT:RETURN "#AST_OPTIONDEFINT"WHEN #AST_RESTORE:RETURN "#AST_RESTORE"WHEN #AST_RESTOREEXPR:RETURN "#AST_RESTOREEXPR"WHEN #AST_DATA:RETURN "#AST_DATA"WHEN #AST_CONST:RETURN "#AST_CONST"WHEN #AST_ENUM:RETURN "#AST_ENUM"WHEN #AST_CONSTVAR:RETURN "#AST_CONSTVAR"WHEN #AST_CALLSPRITE:RETURN "#AST_CALLSPRITE"WHEN #AST_CALLTEXT:RETURN "#AST_CALLTEXT"WHEN #AST_ARRAYEXPR:RETURN "#AST_ARRAYEXPR"WHEN #AST_DEF:RETURN "#AST_DEF"WHEN #AST_END:RETURN "#AST_END"WHEN #AST_TPRINT:RETURN "#AST_TPRINT"WHEN #AST_EMPTYEXPR:RETURN "#AST_EMPTYEXPR"WHEN #AST_:RETURN "#AST_"
 OTHERWISE
  RETURN "#AST"+STR$(TYP)
 ENDCASE
END
DEF NEW_AST(TYP)
 PUSH AST_TYP,TYP
 VAR E$
 PUSH AST%,0
 PUSH AST#,0
 PUSH AST$,E$
 PUSH AST_LEFT,0
 PUSH AST_RIGHT,0
 PUSH AST_NEXT,0
 PUSH AST_PREV,0
 PUSH AST_A1,0
 PUSH AST_A2,0
 PUSH AST_A3,0
 PUSH AST_A4,0
 PUSH AST_A5,0
 RETURN LAST(AST_TYP)
END

DEF NEW_AST_LR(TYP,L,R)
 VAR A=NEW_AST(TYP)
 AST_LEFT[A]=L
 AST_RIGHT[A]=R
 RETURN A
END

DEF NEW_AST_APPEND(TYP,PREV)
 VAR A=NEW_AST(TYP)
 AST_PREV[A]=PREV
 AST_NEXT[PREV]=LAST(AST_TYP)
 RETURN LAST(AST_TYP)
END

DEF NEW_AST_INT(TYP,V%)
 VAR A=NEW_AST(TYP)
 AST%[A]=V%
 RETURN A
END

DEF NEW_AST_DBL(TYP,V#)
 VAR A=NEW_AST(TYP)
 AST#[A]=V#
 RETURN A
END
DEF NEW_AST_STR(TYP,V$)
 VAR A=NEW_AST(TYP)
 AST$[A]=V$
 RETURN A
END

DEF NEW_AST_IMM(V)
 VAR A
 CASE TYPEOF(V)
 WHEN #T_INT
  A=NEW_AST_INT(#AST_IMM_INT,V)
 WHEN #T_REAL
  A=NEW_AST_DBL(#AST_IMM_DBL,V)
 WHEN #T_STR
  A=NEW_AST_STR(#AST_IMM_STR,V)
 OTHERWISE
  STOP
 ENDCASE
 RETURN A
END
DEF AST_IND IND
 ?" "*IND;
END
DEF DUMP_AST A,IND
 IF!A THEN RETURN
 VAR I,J
 CASE AST_TYP[A]
 WHEN #AST_STATEMENTS
  AST_IND IND:?"STATEMENTS"
  I=AST_NEXT[AST_LEFT[A]]
  WHILE I
   IF!I THEN BREAK
   DUMP_AST AST_LEFT[I],IND+1
   I=AST_NEXT[I]
  WEND
 WHEN #AST_PRINT
  AST_IND IND:?"PRINT"
  INC IND
  I=AST_NEXT[AST_LEFT[A]]
  WHILE I
   IF!I THEN BREAK
   CASE AST_TYP[I]
   WHEN #AST_PRINT_EXPR_COMMA
    AST_IND IND:?"PRINT COMMA"
   WHEN #AST_PRINT_EXPR_NEWLINE
    AST_IND IND:?"PRINT NEWLINE"
   WHEN #AST_PRINT_EXPR_SEMI
    AST_IND IND:?"PRINT SEMI"
   ENDCASE
   DUMP_AST AST_LEFT[I],IND+1
   I=AST_NEXT[I]
  WEND
 WHEN #AST_IF
  AST_IND IND:?"IF"
  INC IND
  AST_IND IND:?"IF EXPR"
  DUMP_AST AST_A1[A],IND+1
  AST_IND IND:?"IF THEN STATEMENTS"
  DUMP_AST AST_A2[A],IND+1
  IF AST_A3[A] THEN
   I=AST_NEXT[AST_A3[A]]
   WHILE I
    AST_IND IND:?"IF ELSEIF EXPR[";J;"]"
    DUMP_AST AST_A1[I],IND+1
    AST_IND IND:?"IF ELSEIF STATEMENTS[";J;"]"
    DUMP_AST AST_A2[I],IND+1
    INC J
    I=AST_NEXT[I]
   WEND
  ENDIF
  AST_IND IND:?"IF ELSE STATEMENTS"
  DUMP_AST AST_A4[A],IND+1
 WHEN #AST_ASSIGN
  AST_IND IND:?"ASSIGN"
  DUMP_AST AST_LEFT[A],IND+1
  DUMP_AST AST_RIGHT[A],IND+1
 WHEN #AST_FOR
  AST_IND IND:?"FOR"
  DUMP_AST AST_A1[A],IND+1
  DUMP_AST AST_A2[A],IND+1
  DUMP_AST AST_A3[A],IND+1
  DUMP_AST AST_A4[A],IND+1
  DUMP_AST AST_A5[A],IND+1
 WHEN #AST_BINOP
  AST_IND IND:?"BINOP ";TKN_STR$(AST%[A])
  DUMP_AST AST_LEFT[A],IND+1
  DUMP_AST AST_RIGHT[A],IND+1
 WHEN #AST_IMM_INT
  AST_IND IND:?"INT ";AST%[A]
 WHEN #AST_IMM_DBL
  AST_IND IND:?"DOUBLE ";AST#[A]
 WHEN #AST_IMM_STR
  AST_IND IND:?"STR ";AST$[A]
 WHEN #AST_VAR
  AST_IND IND:?"VAR ";AST$[A]
 WHEN #AST_EMPTYEXPR
  AST_IND IND:?"EMPTYEXPR"
 WHEN #AST_DEF
 '$:NAME
 'A1:IN LIST
 'A2:OUT LIST
 'A3:STATEMENTS
 'A4:HAS RETURN VALUE
  IF AST_A4[A] THEN
   AST_IND IND:?"DEF(";AST$[A];")"
  ELSE
   AST_IND IND:?"DEF ";AST$[A]
  ENDIF
  AST_IND IND:?"DEF ARGS(IN)"
  I=AST_NEXT[AST_A1[A]]
  WHILE I
   AST_IND IND+1:?AST$[I]
   INC J
   I=AST_NEXT[I]
  WEND
  AST_IND IND:?"DEF ARGS(OUT)"
  I=AST_NEXT[AST_A2[A]]
  WHILE I
   AST_IND IND+1:?AST$[I]
   INC J
   I=AST_NEXT[I]
  WEND
  AST_IND IND:?"DEF STATEMENTS"
  DUMP_AST AST_A3[A],IND+1
 WHEN #AST_CALLFUNC
  I=AST_NEXT[AST_A1[A]]
  AST_IND IND:?"CALLFUNC ARGS(IN)"
  WHILE I
   DUMP_AST AST_A1[I],IND+1
   INC J
   I=AST_NEXT[I]
  WEND
  I=AST_NEXT[AST_A2[A]]
  AST_IND IND:?"CALLFUNC ARGS(OUT)"
  WHILE I
   DUMP_AST AST_A1[I],IND+1
   INC J
   I=AST_NEXT[I]
  WEND
 WHEN #AST_LABEL
  AST_IND IND:?"LABEL ";AST$[A]
 WHEN #AST_DATA
  I=AST_NEXT[AST_A1[A]]
  AST_IND IND:?"DATA"
  WHILE I
   DUMP_AST AST_A1[I],IND+1
   INC J
   I=AST_NEXT[I]
  WEND
 WHEN #AST_RETURN
  AST_IND IND:?"RETURN FROM SUBROUTINE"
 WHEN #AST_RETURNFUNC
  AST_IND IND:?"RETURN FROM FUNCTION"
  DUMP_AST AST_LEFT[A],IND+1
 OTHERWISE
  AST_IND IND:?AST_STR$(AST_TYP[A])
 ENDCASE
END

VAR PARSER_RETURN_EXPR
VAR PARSER_IN_FUNC
DEF INIT_PARSER
 PARSER_RETURN_EXPR=#FALSE
 PARSER_IN_FUNC=#FALSE
END
DEF PARSE()
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_EOF THEN RETURN ROOT
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_STATEMENT()
 LOOP
  VAR T
  LEX_CUR OUT T,
  CASE T
  WHEN #TKN_TPRINT
   RETURN PARSE_PRINT(#TRUE)
  WHEN #TKN_PRINT
   RETURN PARSE_PRINT(#FALSE)
  WHEN #TKN_IDEN
   RETURN PARSE_IDEN()
  WHEN #TKN_IF
   RETURN PARSE_IF()
  WHEN #TKN_FOR
   RETURN PARSE_FOR()
  WHEN #TKN_BREAK
   LEX_NEXT OUT ,
   RETURN NEW_AST(#AST_BREAK)
  WHEN #TKN_CONTINUE
   LEX_NEXT OUT ,
   RETURN NEW_AST(#AST_CONTINUE)
  WHEN #TKN_REPEAT
   RETURN PARSE_REPEAT()
  WHEN #TKN_WHILE
   RETURN PARSE_WHILE()
  WHEN #TKN_LOOP
   RETURN PARSE_LOOP()
  WHEN #TKN_LABEL
   RETURN PARSE_LABEL()
  WHEN #TKN_GOTO
   RETURN PARSE_GOTO()
  WHEN #TKN_GOSUB
   RETURN PARSE_GOSUB()
  WHEN #TKN_ON
   RETURN PARSE_ON()
  WHEN #TKN_RETURN
   RETURN PARSE_RETURN()
  WHEN #TKN_DATA
   RETURN PARSE_DATA()
  WHEN #TKN_RESTORE
   RETURN PARSE_RESTORE()
  WHEN #TKN_VAR
  WHEN #TKN_CONST
  WHEN #TKN_ENUM
   RETURN PARSE_VAR()
  WHEN #TKN_CALL
   RETURN PARSE_CALL()
  WHEN #TKN_DEF
   RETURN PARSE_DEF()
  WHEN #TKN_END
   RETURN PARSE_END()
  WHEN #TKN_READ
   RETURN PARSE_READ()
  ENDCASE
  SYNTAX_ERROR
 ENDLOOP
END
DEF PARSE_READ()
 VAR T,V
 VAR AST=NEW_AST(#AST_READ)
 VAR P=NEW_AST(#AST_ITEM)
 AST_A1[AST]=P
 LOOP
  LEX_NEXT OUT ,
  VAR EXPR=PARSE_EXPR()
  VAR ITEM=NEW_AST(#AST_ITEM)
  AST_A1[ITEM]=EXPR
  AST_NEXT[P]=ITEM
  LEX_CUR OUT T,V
  IF T!=#TKN_COMMA THEN
   BREAK
  ENDIF
 ENDLOOP
 RETURN AST
END
DEF PARSE_IDEN()
 VAR T,NAME$,V
 LEX_CUR OUT T,NAME$
 IF TO_UPPER$(NAME$)=="OPTION"THEN
  RETURN PARSE_OPTION()
 ENDIF
 VAR SI,ST,SV
 LEX_SAVE OUT SI,ST,SV
 VAR EXPR=PARSE_EXPR()
 LEX_CUR OUT T,V
 IF T==#TKN_ASSIGN THEN
  RETURN PARSE_ASSIGN(EXPR)
 ELSE
  LEX_LOAD SI,ST,SV
  RETURN PARSE_CALLFUNC(NAME$,#TRUE)
 ENDIF
 'IDEN=EXPR
 'IDEN [EXPR,EXPR...] [OUT REF-EXPR...]
END
DEF PARSE_OPTION()
 VAR T,V
 LEX_NEXT OUT T,V
 IF T==#TKN_IDEN&&TO_UPPER$(V)=="STRICT"THEN
  LEX_NEXT OUT T,V
  RETURN NEW_AST(#AST_OPTIONSTRICT)
 ELSEIF T==#TKN_IDEN&&TO_UPPER$(V)=="DEFINT"THEN
  LEX_NEXT OUT T,V
  RETURN NEW_AST(#AST_OPTIONSTRICT)
 ENDIF
 SYNTAX_ERROR "OPTION"
END
DEF PARSE_RESTORE()
 VAR T,V,AST
 LEX_NEXT OUT T,V
 IF T==#TKN_LABEL THEN
  AST=NEW_AST(#AST_RESTORE)
  AST$[AST]=V
  LEX_NEXT OUT T,V
 ELSEIF IS_EXPR_TKN(T) THEN
  AST=NEW_AST(#AST_RESTOREEXPR)
  AST_LEFT[AST]=PARSE_EXPR()
 ELSE
  AST=NEW_AST(#AST_RESTORE)
 ENDIF
 RETURN AST
END
DEF PARSE_CALL()
 VAR T,V
 LEX_NEXT OUT T,V
 IF T==#TKN_IDEN&&TO_UPPER$(V)=="SPRITE"THEN
  LEX_NEXT OUT T,V
  RETURN NEW_AST(#AST_CALLSPRITE)
 ELSEIF T==#TKN_IDEN&&TO_UPPER$(V)=="TEXT"THEN
  LEX_NEXT OUT T,V
  RETURN NEW_AST(#AST_CALLTEXT)
 ELSE
  RETURN PARSE_CALLFUNC("CALL",#FALSE)
 ENDIF
END
DEF PARSE_CALLFUNC(NAME$,NXT)
 VAR T,V
 VAR AST=NEW_AST(#AST_CALLFUNC)
 'A1:IN ARGS
 'A2:OUT ARGS
 VAR P=NEW_AST(#AST_ITEM)
 AST_A1[AST]=P
 AST$[AST]=NAME$
 VAR FIRST=P
 IF TRACE THEN ?"callfunc",NAME$
 VAR FRST=#TRUE,ITEM
 VAR EXPR
 LOOP
  IF NXT THEN
   LEX_NEXT OUT T,V
  ELSE
   LEX_CUR OUT T,V
   NXT=#TRUE
  ENDIF
  IF T==#TKN_COMMA THEN
   EXPR=NEW_AST(#AST_EMPTYEXPR)
  ELSEIF!IS_EXPR_TKN(T) THEN
   IF !FRST THEN
    EXPR=NEW_AST(#AST_EMPTYEXPR)
    ITEM=NEW_AST(#AST_ITEM)
    AST_PREV[ITEM]=P
    AST_A1[ITEM]=EXPR
    AST_NEXT[P]=ITEM
    P=ITEM
   ENDIF
   BREAK
  ELSE
   EXPR=PARSE_EXPR()
  ENDIF
  FRST=#FALSE
  ITEM=NEW_AST(#AST_ITEM)
  AST_A1[ITEM]=EXPR
  AST_PREV[ITEM]=P
  AST_NEXT[P]=ITEM
  LEX_CUR OUT T,V
  P=ITEM
  IF T!=#TKN_COMMA THEN
   BREAK
  ENDIF
 ENDLOOP
 AST_PREV[FIRST]=P
 IF T!=#TKN_OUT THEN
  RETURN AST
 ENDIF
 P=NEW_AST(#AST_ITEM)
 AST_A2[AST]=P
 FIRST=P
 FRST=#TRUE
 LOOP
  IF NXT THEN
   LEX_NEXT OUT T,V
  ELSE
   LEX_CUR OUT T,V
   NXT=#TRUE
  ENDIF
  IF T==#TKN_COMMA THEN
   EXPR=NEW_AST(#AST_EMPTYEXPR)
  ELSEIF!IS_EXPR_TKN(T) THEN
   IF !FRST THEN
    EXPR=NEW_AST(#AST_EMPTYEXPR)
    ITEM=NEW_AST(#AST_ITEM)
    AST_PREV[ITEM]=P
    AST_A1[ITEM]=EXPR
    AST_NEXT[P]=ITEM
    P=ITEM
   ENDIF
   BREAK
  ELSE
   EXPR=PARSE_EXPR()
  ENDIF
  FRST=#FALSE
  ITEM=NEW_AST(#AST_ITEM)
  AST_A1[ITEM]=EXPR
  AST_PREV[ITEM]=P
  AST_NEXT[P]=ITEM
  LEX_CUR OUT T,V
  P=ITEM
  IF T!=#TKN_COMMA THEN
   BREAK
  ENDIF
 ENDLOOP
 AST_PREV[FIRST]=P
 RETURN AST
END
DEF PARSE_ASSIGN(EXPR)
 LEX_NEXT OUT ,
 VAR AST=NEW_AST(#AST_ASSIGN)
 AST_LEFT[AST]=EXPR
 IF TRACE THEN ?"assign
 AST_RIGHT[AST]=PARSE_EXPR()
 RETURN AST
END
DEF PARSE_IF()
 LEX_NEXT OUT ,
 VAR EXPR=PARSE_EXPR()
 VAR T,V
 LEX_CUR OUT T,V
 CASE T
 WHEN #TKN_GOTO
  NOTIMPL
 WHEN #TKN_THEN
  VAR A,B,C
  LEX_SAVE OUT A,B,C
  LEX_NEXT OUT T,V
  IF T==#TKN_NEWLINE THEN
   RETURN PARSE_MULTILINE_IF(EXPR,#TRUE)
  ENDIF
  LEX_LOAD A,B,C
  RETURN PARSE_MULTILINE_IF(EXPR,#FALSE)
 OTHERWISE
  SYNTAX_ERROR
 ENDCASE
END
DEF PARSE_MULTILINE_IF(EXPR,MULT)
 VAR AST=NEW_AST(#AST_IF)
 VAR THENSTMTS=PARSE_MULTILINE_IF_STATEMENTS(MULT)
 VAR T,V
 AST_A1[AST]=EXPR
 AST_A2[AST]=THENSTMTS
 LEX_CUR OUT T,V
 IF MULT THEN
  LEX_NEXT OUT ,
 ENDIF
 IF !MULT&&T==#TKN_NEWLINE THEN
  RETURN AST
 ENDIF
 IF T==#TKN_ENDIF THEN
  RETURN AST
 ENDIF
 IF T==#TKN_ELSE THEN
  AST_A4[AST]=PARSE_MULTILINE_ELSE_STATEMENTS(MULT)
  LEX_NEXT OUT ,
  RETURN AST
 ENDIF
 IF T==#TKN_ELSEIF THEN
  VAR P=NEW_AST(#AST_ITEM)
  AST_A3[AST]=P
  LOOP
   VAR ELIFEXPR=PARSE_EXPR()
   LEX_CUR OUT T,V
   IF T!=#TKN_THEN THEN SYNTAX_ERROR "THEN EXPECTED":RETURN AST
   LEX_NEXT OUT ,
   VAR ELIFSTMTS=PARSE_MULTILINE_IF_STATEMENTS(MULT)
   VAR ITEM=NEW_AST(#AST_ITEM)
   AST_A1[ITEM]=ELIFEXPR
   AST_A2[ITEM]=ELIFSTMTS
   AST_NEXT[P]=ITEM
   P=ITEM
   LEX_CUR OUT T,V
   LEX_NEXT OUT ,
   IF !MULT&&T==#TKN_NEWLINE THEN
    RETURN AST
   ENDIF
   IF T==#TKN_ENDIF THEN
    RETURN AST
   ENDIF
   IF T==#TKN_ELSE THEN
    AST_A4[AST]=PARSE_MULTILINE_ELSE_STATEMENTS(MULT)
    LEX_NEXT OUT ,
    RETURN AST
   ENDIF
  ENDLOOP
  RETURN AST
 ENDIF
 SYNTAX_ERROR
 RETURN AST
END
DEF PARSE_MULTILINE_IF_STATEMENTS(MULT)
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_NEWLINE&&!MULT THEN RETURN ROOT
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  IF T==#TKN_ENDIF THEN RETURN ROOT
  IF T==#TKN_ELSE THEN RETURN ROOT
  IF T==#TKN_ELSEIF THEN RETURN ROOT
  IF T==#TKN_EOF THEN SYNTAX_ERROR:RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_MULTILINE_ELSE_STATEMENTS(MULT)
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_NEWLINE&&!MULT THEN RETURN ROOT
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  IF T==#TKN_ENDIF THEN RETURN ROOT
  IF T==#TKN_EOF THEN SYNTAX_ERROR:RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_FOR_STATEMENTS()
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  IF T==#TKN_NEXT THEN RETURN ROOT
  IF T==#TKN_EOF THEN SYNTAX_ERROR:RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_FOR()
 'A1:INDEXREFEXPR
 'A2:INITEXPR
 'A3:TOEXPR
 'A4:STEPEXPR
 'A5:STATEMENTS
 VAR T,V
 LEX_NEXT OUT ,
 VAR AST=NEW_AST(#AST_FOR)
 'REFEXPR
 AST_A1[AST]=PARSE_EXPR()
 LEX_CUR OUT T,V
 IF T!=#TKN_ASSIGN THEN
  SYNTAX_ERROR "EXPECTED '='"
 ENDIF
 LEX_NEXT OUT ,
 'INITEXPR
 AST_A2[AST]=PARSE_EXPR()
 LEX_CUR OUT T,V
 IF T!=#TKN_IDEN||V!="TO" THEN
  SYNTAX_ERROR "EXPECTED 'TO'"
 ENDIF
 LEX_NEXT OUT ,
 'TOEXPR
 AST_A3[AST]=PARSE_EXPR()
 LEX_CUR OUT T,V
 IF T==#TKN_IDEN&&V=="STEP" THEN
  LEX_NEXT OUT ,
  'STEPEXPR
  AST_A4[AST]=PARSE_EXPR()
 ENDIF
 AST_A5[AST]=PARSE_FOR_STATEMENTS()
 LEX_NEXT OUT T,V
 'NEXT [IDEN]
 'NEXT IDEN1,IDEN2 NOT ALLOWED
 IF T==#TKN_IDEN THEN LEX_NEXT OUT ,
 RETURN AST
END

DEF PARSE_WHILE()
 VAR AST=NEW_AST(#AST_WHILE)
 VAR T,V
 LEX_NEXT OUT ,
 AST_A1[AST]=PARSE_EXPR()
 AST_A2[AST]=PARSE_WHILE_STATEMENTS()
 RETURN AST
END
DEF PARSE_WHILE_STATEMENTS()
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  IF T==#TKN_WEND THEN LEX_NEXT OUT,:RETURN ROOT
  IF T==#TKN_EOF THEN SYNTAX_ERROR:RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END

DEF PARSE_REPEAT()
 VAR AST=NEW_AST(#AST_REPEAT)
 VAR T,V
 LEX_NEXT OUT ,
 AST_A2[AST]=PARSE_REPEAT_STATEMENTS()
 AST_A1[AST]=PARSE_EXPR()
 RETURN AST
END
DEF PARSE_REPEAT_STATEMENTS()
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  IF T==#TKN_UNTIL THEN LEX_NEXT OUT ,:RETURN ROOT
  IF T==#TKN_EOF THEN SYNTAX_ERROR:RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_LOOP()
 VAR AST=NEW_AST(#AST_LOOP)
 VAR T,V
 LEX_NEXT OUT ,
 AST_A2[AST]=PARSE_LOOP_STATEMENTS()
 RETURN AST
END
DEF PARSE_LOOP_STATEMENTS()
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LEX_NEXT OUT T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  IF T==#TKN_ENDLOOP THEN LEX_NEXT OUT ,:RETURN ROOT
  IF T==#TKN_EOF THEN SYNTAX_ERROR:RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_LABEL()
 VAR T,V
 LEX_CUR OUT T,V
 LEX_NEXT OUT ,
 VAR AST=NEW_AST(#AST_LABEL)
 AST$[AST]=V
 RETURN AST
END
DEF PARSE_GOTO()
 VAR T,V,AST
 LEX_NEXT OUT T,V
 IF T==#TKN_LABEL THEN
  AST=NEW_AST(#AST_GOTO)
  AST$[AST]=V
  LEX_NEXT OUT T,V
 ELSE
  AST=NEW_AST(#AST_GOTOEXPR)
  AST_LEFT[AST]=PARSE_EXPR()
 ENDIF
 RETURN AST
END
DEF PARSE_GOSUB()
 VAR T,V,AST
 LEX_NEXT OUT T,V
 IF T==#TKN_LABEL THEN
  AST=NEW_AST(#AST_GOSUB)
  AST$[AST]=V
  LEX_NEXT OUT T,V
 ELSE
  AST=NEW_AST(#AST_GOSUBEXPR)
  AST_LEFT[AST]=PARSE_EXPR()
 ENDIF
 RETURN AST
END
DEF PARSE_ON()
 VAR T,V,AST
 LEX_NEXT OUT T,V
 IF T==#TKN_BREAK THEN
  LEX_NEXT OUT T,V
  IF T==#TKN_LABEL THEN
   AST=NEW_AST(#AST_ONBREAKGOTO)
   AST$[AST]=V
  ELSE
   AST=NEW_AST(#AST_ONBREAKGOTOEXPR)
   AST_LEFT[AST]=PARSE_EXPR()
  ENDIF
 ELSE
  VAR EXPR=PARSE_EXPR()
  LEX_CUR OUT T,V
  IF T==#TKN_GOTO THEN
   AST=NEW_AST(#AST_ONGOTO)
  ELSEIF T==#TKN_GOSUB THEN
   AST=NEW_AST(#AST_ONGOSUB)
  ELSE
   SYNTAX_ERROR "EXPECTED GOTO OR GOSUB(ON GOTO)"
   RETURN AST
  ENDIF
  AST_A1[AST]=EXPR
  LEX_NEXT OUT T,V
  VAR P=NEW_AST(#AST_ITEM)
  AST_A3[AST]=P
  LOOP
   IF T!=#TKN_LABEL THEN
    SYNTAX_ERROR "EXPECTED LABEL(ON GOTO)"
    RETURN AST
   ENDIF
   VAR ITEM=NEW_AST(#AST_ITEM)
   AST$[ITEM]=V
   AST_NEXT[P]=ITEM
   P=ITEM
   LEX_NEXT OUT T,V
   IF T!=#TKN_COMMA THEN BREAK
  ENDLOOP
 ENDIF
END
DEF PARSE_RETURN()
 LEX_NEXT OUT ,
 VAR AST
 IF PARSER_IN_FUNC THEN
  AST=NEW_AST(#AST_RETURNFUNC)
 ELSE
  AST=NEW_AST(#AST_RETURN)
 ENDIF
 IF PARSER_RETURN_EXPR THEN
  AST_LEFT[AST]=PARSE_EXPR()
 ENDIF
 RETURN AST
END
DEF PARSE_DATA()
 VAR AST=NEW_AST(#AST_DATA)
 VAR T,V
 VAR P=NEW_AST(#AST_ITEM)
 AST_A1[AST]=P
 LOOP
  LEX_NEXT OUT ,
  VAR EXPR=PARSE_EXPR()
  VAR ITEM=NEW_AST(#AST_ITEM)
  AST_A1[ITEM]=EXPR
  AST_NEXT[P]=ITEM
  LEX_CUR OUT T,V
  IF T!=#TKN_COMMA THEN BREAK
  P=ITEM
 ENDLOOP
 RETURN AST
END
DEF PARSE_ARRAY_INDEX()
 VAR T,V
 VAR P=NEW_AST(#AST_ITEM)
 VAR R=P
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_RB THEN
   LEX_NEXT OUT T,V
   BREAK
  ENDIF
  IF TRACE THEN ?"PARSE_ARRAY_INDEX==
  VAR EXPR=PARSE_EXPR()
  IF TRACE THEN ?"PARSE_ARRAY_INDEX==~~
  VAR ITEM=NEW_AST(#AST_ITEM)
  AST_A1[ITEM]=EXPR
  AST_NEXT[P]=ITEM
  AST_PREV[ITEM]=P
  P=ITEM
  LEX_CUR OUT T,V
  IF T!=#TKN_COMMA THEN
   IF T==#TKN_RB THEN
    LEX_NEXT OUT T,V
   ELSE
    SYNTAX_ERROR "EXPECTED ']'"
   ENDIF
   BREAK
  ENDIF
  LEX_NEXT OUT T,V
 ENDLOOP
 AST_PREV[R]=P
 RETURN R
END
DEF PARSE_VAR()
 VAR T,V
 LEX_CUR OUT T,V
 VAR AST
 VAR VAR_
 VAR CONST_
 CASE T
 WHEN #TKN_VAR
  AST=NEW_AST(#AST_DEFVAR)
  VAR_=#TRUE
 WHEN #TKN_CONST
  AST=NEW_AST(#AST_CONST)
  CONST_=#TRUE
 WHEN #TKN_ENUM
  AST=NEW_AST(#AST_ENUM)
 ENDCASE
 'VAR IDEN[\[EXPR[,EXPR[,EXPR[,EXPR]]]\]](=EXPR|=\[EXPR...\]|)...
 'DIM ARY[N]=[]'TYPEMISMATCH
 VAR P=NEW_AST(#AST_ITEM)
 AST_A1[AST]=P
 VAR HAS
 LOOP
  LEX_NEXT OUT T,V
  IF VAR_&&T!=#TKN_IDEN THEN
   'VAR HA KETSU COMMA OK
   IF HAS THEN
    BREAK
   ENDIF
   SYNTAX_ERROR "EXPECTED IDEN(VAR)"
   RETURN AST
  ENDIF
  HAS=#TRUE
  IF !VAR_&&T!=#TKN_CONSTVAR THEN
   SYNTAX_ERROR "EXPECTED IDEN(CONST/ENUM)"
   RETURN AST
  ENDIF
  VAR ITEM=NEW_AST(#AST_ITEM)
  AST_NEXT[P]=ITEM
  AST$[ITEM]=V
  P=ITEM
  '$:NAME
  'A1:INIT EXPR
  'A2:ARRAY DIM
  'A3:ARRAY INIT LIST
  LEX_NEXT OUT T,V
  IF VAR_&&T==#TKN_LB THEN
   'DEFINE ARRAY
   LEX_NEXT OUT T,V
   AST_A2[ITEM]=PARSE_ARRAY_INDEX()
   IF TRACE THEN ?"END ARRAY INDE INIT"
   LEX_CUR OUT T,V
  ENDIF
  IF T==#TKN_ASSIGN THEN
   LEX_NEXT OUT T,V
   'INIT ARRAY
   IF VAR_&&T==#TKN_LB THEN
    LEX_NEXT OUT T,V
    AST_A3[ITEM]=PARSE_ARRAY_INDEX()
    LEX_CUR OUT T,V
   ELSE
    AST_A1[ITEM]=PARSE_EXPR()
   ENDIF
  ELSEIF CONST_ THEN
   SYNTAX_ERROR "CONST:EXPECTED '='"
  ENDIF
  LEX_CUR OUT T,V
  IF T!=#TKN_COMMA THEN
   BREAK
  ENDIF
 ENDLOOP
 RETURN AST
END
DEF PARSE_DEF_ARG$()
 VAR T,V
 VAR VN$
 LEX_CUR OUT T,V
 IF T!=#TKN_IDEN THEN
  SYNTAX_ERROR
  RETURN ""
 ENDIF
 VN$=V
 LEX_NEXT OUT T,V
 IF T==#TKN_LB THEN
  LEX_NEXT OUT T,V
  IF T!=#TKN_RB THEN
   SYNTAX_ERROR "EXPECTED ']'"
  ENDIF
 ENDIF
 RETURN VN$
END
DEF PARSE_DEF_LIST()
 VAR T,V
 VAR P=NEW_AST(#AST_ITEM)
 VAR R=P
 LOOP
  LEX_CUR OUT T,V
  IF T!=#TKN_IDEN THEN
   BREAK
  ENDIF
  VAR V$=PARSE_DEF_ARG$()
  VAR ITEM=NEW_AST(#AST_ITEM)
  AST$[ITEM]=V$
  AST_NEXT[P]=ITEM
  AST_PREV[ITEM]=P
  P=ITEM
  LEX_CUR OUT T,V
  IF T!=#TKN_COMMA THEN
   BREAK
  ENDIF
  LEX_NEXT OUT T,V
 ENDLOOP
 AST_PREV[R]=P
 RETURN R
END
DEF PARSE_DEF()
 'DEF IDEN ([IDEN[\[\]]...]|*) OUT ([IDEN[\[\]]...]|*)
 VAR AST=NEW_AST(#AST_DEF)
 '$:NAME
 'A1:IN LIST
 'A2:OUT LIST
 'A3:STATEMENTS
 'A4:HAS RETURN VALUE
 VAR T,V
 LEX_NEXT OUT T,V
 IF PARSER_IN_FUNC THEN
  NESTED_DEF
 ENDIF
 PARSER_IN_FUNC=#TRUE
 AST$[AST]=PARSE_DEF_ARG$()
 LEX_CUR OUT T,V
 IF T==#TKN_LP THEN
  PARSER_RETURN_EXPR=#TRUE
  LEX_NEXT OUT ,
 ENDIF
 AST_A1[AST]=PARSE_DEF_LIST()
 LEX_CUR OUT T,V
 IF PARSER_RETURN_EXPR THEN
  AST_A4[AST]=#TRUE
  IF T!=#TKN_RP THEN
   SYNTAX_ERROR "EXPECTED ')'"
  ELSE
   LEX_NEXT OUT ,
  ENDIF
 ELSE
  LEX_CUR OUT T,V
  IF T==#TKN_OUT THEN
   LEX_NEXT OUT T,V
   AST_A2[AST]=PARSE_DEF_LIST()
  ENDIF
 ENDIF
 AST_A3[AST]=PARSE_DEF_STATEMENTS()
 PARSER_IN_FUNC=#FALSE
 PARSER_RETURN_EXPR=#FALSE
 RETURN AST
END

DEF PARSE_DEF_STATEMENTS()
 VAR ROOT=NEW_AST(#AST_STATEMENTS)
 VAR A=ROOT
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[A]=PRV
 VAR T,V
 LOOP
  LEX_CUR OUT T,V
  IF T==#TKN_NEWLINE||T==#TKN_COL THEN LEX_NEXT OUT ,:CONTINUE
  IF T==#TKN_END THEN LEX_NEXT OUT ,:RETURN ROOT
  IF T==#TKN_EOF THEN SYNTAX_ERROR:RETURN ROOT
  VAR S=PARSE_STATEMENT()
  A=NEW_AST(#AST_ITEM)
  AST_LEFT[A]=S
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
 ENDLOOP
END
DEF PARSE_END()
 LEX_NEXT OUT ,
 RETURN NEW_AST(#AST_END)
END
DEF IS_EXPR_TKN(T)
 CASE T
 WHEN #TKN_NUM
 WHEN #TKN_STR
 WHEN #TKN_IDEN
 WHEN #TKN_LP
 WHEN #TKN_MINUS
 WHEN #TKN_NOT
 WHEN #TKN_LNOT
 WHEN #TKN_LABEL
 WHEN #TKN_CONSTVAR
  RETURN #TRUE
 ENDCASE
 RETURN #FALSE
END
DEF PARSE_PRINT(TPRNT)
 VAR T,V
 VAR AST
 IF TPRNT THEN
  AST=NEW_AST(#AST_TPRINT)
  'FIXME
 ELSE
  AST=NEW_AST(#AST_PRINT)
 ENDIF
 VAR PRV=NEW_AST(#AST_ITEM)
 AST_LEFT[AST]=PRV
 LEX_NEXT OUT T,V
 IF !IS_EXPR_TKN(T)THEN
  IF TRACE THEN ?"PRINT_E"
  RETURN AST
 ENDIF
 WHILE 1
  VAR EXPR=PARSE_EXPR()
  LEX_CUR OUT T,V
  VAR A
  IF T==#TKN_COMMA THEN
   IF TRACE THEN ?"PRINT_COMMA"
   A=NEW_AST(#AST_PRINT_EXPR_COMMA)
   LEX_NEXT OUT ,
  ELSEIF T==#TKN_SEMI THEN
   IF TRACE THEN ?"PRINT_SEMI"
   A=NEW_AST(#AST_PRINT_EXPR_SEMI)
   LEX_NEXT OUT ,
  ELSE
   IF TRACE THEN ?"PRINT"
   A=NEW_AST(#AST_PRINT_EXPR_NEWLINE)
  ENDIF
  AST_LEFT[A]=EXPR
  AST_NEXT[PRV]=A
  AST_PREV[A]=PRV
  PRV=A
  IF T!=#TKN_COMMA&&T!=#TKN_SEMI THEN
   RETURN AST
  ENDIF
  LEX_CUR OUT T,V
  IF !IS_EXPR_TKN(T)THEN
   RETURN AST
  ENDIF
 WEND
END
DEF PARSE_TERM()
 VAR T,V
 LEX_CUR OUT T,V
 LEX_NEXT OUT ,
 VAR AST
 CASE T
 WHEN #TKN_LNOT
 WHEN #TKN_NOT
 WHEN #TKN_MINUS
  AST=NEW_AST(#AST_UNAOP)
  AST%[AST]=T
  AST_LEFT[AST]=PARSE_TERM()
  IF TRACE THEN ?"UNARY"
 'FIXME:EXPND CONST EXPR
 WHEN #TKN_NUM
  IF TRACE THEN ?"IMM",V
  IF TYPEOF(V)==#T_INT THEN
   AST=NEW_AST_INT(#AST_IMM_INT,V)
  ELSEIF TYPEOF(V)==#T_REAL THEN
   AST=NEW_AST_DBL(#AST_IMM_DBL,V)
  ELSE
   STOP
  ENDIF
 WHEN #TKN_LABEL
 WHEN #TKN_STR
  IF TRACE THEN ?"IMM",V
  AST=NEW_AST_STR(#AST_IMM_STR,V)
 WHEN #TKN_CONSTVAR
  IF TRACE THEN ?"CONSTVAR",V
  AST=NEW_AST_STR(#AST_CONSTVAR,V)
 WHEN #TKN_IDEN
  VAR T2,V2
  LEX_CUR OUT T2,V2
  IF T2==#TKN_LP THEN
   AST=PARSE_CALLFUNCEXPR(V)
  ELSE
   IF TRACE THEN ?"VAR",V
   AST=NEW_AST_STR(#AST_VAR,V)
  ENDIF
 WHEN #TKN_LP
  AST=PARSE_EXPR()
  LEX_CUR OUT T,V
  IF T!=#TKN_RP THEN
   SYNTAX_ERROR "EXPECTED ')'"
  ELSE
   LEX_NEXT OUT ,
  ENDIF
 OTHERWISE
  SYNTAX_ERROR
 ENDCASE
 RETURN AST
END
DEF PARSE_CALLFUNCEXPR(NAME$)
 VAR AST=NEW_AST_STR(#AST_CALLFUNCEXPR,NAME$)
 VAR T,V
 VAR P=NEW_AST(#AST_ITEM)
 AST_A1[AST]=P
 AST$[AST]=NAME$
 VAR FIRST=P
 LOOP
  LEX_NEXT OUT T,V
  IF T==#TKN_RP THEN
   LEX_NEXT OUT T,V
   BREAK
  ENDIF
  VAR EXPR=PARSE_EXPR()
  VAR ITEM=NEW_AST(#AST_ITEM)
  AST_A1[ITEM]=EXPR
  AST_PREV[ITEM]=P
  AST_NEXT[P]=ITEM
  P=ITEM
  LEX_CUR OUT T,V
  IF T!=#TKN_COMMA THEN
   IF T==#TKN_RP THEN
    LEX_NEXT OUT T,V
   ELSE
    SYNTAX_ERROR "EXPECTED ')'"
   ENDIF
   BREAK
  ENDIF
 ENDLOOP
 AST_PREV[FIRST]=P
 RETURN AST
END
ENUM\
 #OPRANK_NOTANOP,\
 #OPRANK_MIN,\
 #OPRANK_PARENT,\
 #OPRANK_MUL,\
 #OPRANK_PLUS,\
 #OPRANK_SHIFT,\
 #OPRANK_EQ,\
 #OPRANK_BIT,\
 #OPRANK_LOG,\
 #OPRANK_MAX
DEF GET_OP_RANK(T)
 CASE T
 WHEN #TKN_LP
 WHEN #TKN_LB
  RETURN #OPRANK_PARENT
 WHEN #TKN_MUL
 WHEN #TKN_DIV
 WHEN #TKN_DIVINT
 WHEN #TKN_MOD
  RETURN #OPRANK_MUL
 WHEN #TKN_PLUS
 WHEN #TKN_MINUS
  RETURN #OPRANK_PLUS
 WHEN #TKN_LSHIFT
 WHEN #TKN_RSHIFT
  RETURN #OPRANK_SHIFT
 WHEN #TKN_EQ
 WHEN #TKN_NEQ
 WHEN #TKN_LESS
 WHEN #TKN_LEQ
 WHEN #TKN_GREAT
 WHEN #TKN_GEQ
  RETURN #OPRANK_EQ
 WHEN #TKN_AND
 WHEN #TKN_OR
 WHEN #TKN_XOR
  RETURN #OPRANK_BIT
 WHEN #TKN_LAND
 WHEN #TKN_LOR
  RETURN #OPRANK_LOG
 ENDCASE
 RETURN #OPRANK_NOTANOP
END
DEF PARSE_EXPR()
 RETURN PARSE_EXPR0(#OPRANK_MAX)
END
DEF PARSE_EXPR0(RANK)
 IF RANK==#OPRANK_MIN THEN
  RETURN PARSE_TERM()
 ENDIF
 VAR T,V
 VAR LEFT=PARSE_EXPR0(RANK-1)
 LOOP
  LEX_CUR OUT T,V
  IF GET_OP_RANK(T)==RANK THEN
   LEX_NEXT OUT ,
   VAR RIGHT
   IF T==#TKN_LB THEN
    RIGHT=PARSE_ARRAY_INDEX()
    IF TRACE THEN ?"BINARY OP",TKN_STR$(T)
    LEFT=NEW_AST_LR(#AST_BINOP,LEFT,RIGHT)
    AST%[LEFT]=T
   ELSE
    RIGHT=PARSE_EXPR0(RANK-1)
    IF TRACE THEN ?"BINARY OP",TKN_STR$(T)
    LEFT=NEW_AST_LR(#AST_BINOP,LEFT,RIGHT)
    AST%[LEFT]=T
   ENDIF
   CONTINUE
  ENDIF
  BREAK
 ENDLOOP
 RETURN LEFT
END

ENUM\
 #VMT_DEFAULT,\
 #VMT_INT,\
 #VMT_REAL,\
 #VMT_STR,\
 #VMT_INTARRAY,\
 #VMT_REALARRAY,\
 #VMT_STRARRAY,\
 #VMT_VARREF,\
 #VMT_LVARREF,\
 #VMT_EMPTYREF,\
 #VMT_ARYREF,\
 #VMT_ARYREF1,\
 #VMT_ARYREF2,\
 #VMT_ARYREF3,\
 #VMT_ARYREF4,\
 #VMT_SUBROUTINE,\
 #VMT_LAST

VAR CMP_STRICT
VAR CMP_DEFINT
VAR CMP_GVARTBL
VAR CMP_GLBLTBL
VAR CMP_FUNCTBL
VAR CMP_CONSTTBL

VAR CMP_GVARNUM

DIM CMP_BREAK[]
DIM CMP_CONTINUE[]
VAR CMP_CURFUNC

DIM FUNC_ADDR[]
'-1:VAARGS
DIM FUNC_INCNT[]
DIM FUNC_OUTCNT[]
DIM FUNC_VARTBL[]
DIM FUNC_LBLTBL[]
DIM FUNC_VARNUM[]

DIM VAR_IDX[]
DIM VAR_TYP[]

DIM LABEL_ADDR[]
DIM LABEL_DATA_ADDR[]

DIM CMP_DATA_TYP[]
DIM CMP_DATA%[]
DIM CMP_DATA#[]
DIM CMP_DATA$[]

DIM CMP_CONST_TYP[]
DIM CMP_CONST%[]
DIM CMP_CONST#[]
DIM CMP_CONST$[]
DEF INIT_COMPILER_VAR
 VAR S=1
 VAR_IDX=ARRAY%(S)
 VAR_TYP=ARRAY%(S)
END
DEF NEW_VAR(IDX,TYP)
 PUSH VAR_IDX,IDX
 PUSH VAR_TYP,TYP
 RETURN LAST(VAR_IDX)
END
DEF INIT_COMPILER_LABEL
 VAR S=1
 LABEL_ADDR=ARRAY%(S)
 LABEL_DATA_ADDR=ARRAY%(S)
END
DEF NEW_LABEL(ADDR,DADDR)
 PUSH LABEL_ADDR,ADDR
 PUSH LABEL_DATA_ADDR,DADDR
 RETURN LAST(LABEL_ADDR)
END
DEF INIT_COMPILER_FUNC
 VAR S=1
 FUNC_ADDR=ARRAY%(S)
 FUNC_INCNT=ARRAY%(S)
 FUNC_OUTCNT=ARRAY%(S)
 FUNC_VARTBL=ARRAY%(S)
 FUNC_LBLTBL=ARRAY%(S)
 FUNC_VARNUM=ARRAY%(S)
END
DEF NEW_FUNC(ADDR,INCNT,OUTCNT)
 PUSH FUNC_ADDR,ADDR
 PUSH FUNC_INCNT,INCNT
 PUSH FUNC_OUTCNT,OUTCNT
 PUSH FUNC_VARTBL,NEW_SPLAY_TREE()
 PUSH FUNC_LBLTBL,NEW_SPLAY_TREE()
 PUSH FUNC_VARNUM,0
 RETURN LAST(FUNC_LBLTBL)
END
DEF INIT_COMPILER_CONST
 VAR S=1
 CMP_CONST_TYP=ARRAY%(S)
 CMP_CONST%=ARRAY%(S)
 CMP_CONST#=ARRAY#(S)
 CMP_CONST$=ARRAY$(S)
 ADD_CONST "#ON",#ON:ADD_CONST "#OFF",#OFF:ADD_CONST "#YES",#YES:ADD_CONST "#NO",#NO:ADD_CONST "#TRUE",#TRUE:ADD_CONST "#FALSE",#FALSE:ADD_CONST "#PI",#PI:ADD_CONST "#EXP",#EXP:ADD_CONST "#C_CLEAR",#C_CLEAR:ADD_CONST "#C_AQUA",#C_AQUA:ADD_CONST "#C_BLACK",#C_BLACK:ADD_CONST "#C_BLUE",#C_BLUE:ADD_CONST "#C_CYAN",#C_CYAN:ADD_CONST "#C_FUCHSIA",#C_FUCHSIA:ADD_CONST "#C_GRAY",#C_GRAY:ADD_CONST "#C_GREEN",#C_GREEN:ADD_CONST "#C_LIME",#C_LIME:ADD_CONST "#C_MAGENTA",#C_MAGENTA:ADD_CONST "#C_MAROON",#C_MAROON:ADD_CONST "#C_NAVY",#C_NAVY:ADD_CONST "#C_OLIVE",#C_OLIVE:ADD_CONST "#C_PURPLE",#C_PURPLE:ADD_CONST "#C_RED",#C_RED:ADD_CONST "#C_SILVER",#C_SILVER:ADD_CONST "#C_TEAL",#C_TEAL:ADD_CONST "#C_WHITE",#C_WHITE:ADD_CONST "#C_YELLOW",#C_YELLOW:ADD_CONST "#B_RUP",#B_RUP:ADD_CONST "#B_RDOWN",#B_RDOWN:ADD_CONST "#B_RLEFT",#B_RLEFT:ADD_CONST "#B_RRIGHT",#B_RRIGHT:ADD_CONST "#B_LUP",#B_LUP:ADD_CONST "#B_LDOWN",#B_LDOWN:ADD_CONST "#B_LLEFT",#B_LLEFT:ADD_CONST "#B_LRIGHT",#B_LRIGHT:ADD_CONST "#B_L1",#B_L1:ADD_CONST "#B_R1",#B_R1:ADD_CONST "#B_L2",#B_L2:ADD_CONST "#B_R2",#B_R2:ADD_CONST "#B_SL",#B_SL:ADD_CONST "#B_SR",#B_SR:ADD_CONST "#B_S1",#B_S1:ADD_CONST "#B_S2",#B_S2:ADD_CONST "#B_LSTICK",#B_LSTICK:ADD_CONST "#B_RSTICK",#B_RSTICK:ADD_CONST "#B_RANY",#B_RANY:ADD_CONST "#B_LANY",#B_LANY:ADD_CONST "#B_ANY",#B_ANY:ADD_CONST "#A_ROT0",#A_ROT0:ADD_CONST "#A_ROT90",#A_ROT90:ADD_CONST "#A_ROT180",#A_ROT180:ADD_CONST "#A_ROT270",#A_ROT270:ADD_CONST "#A_REVH",#A_REVH:ADD_CONST "#A_REVV",#A_REVV:ADD_CONST "#A_ADD",#A_ADD:ADD_CONST "#CHKXY",#CHKXY:ADD_CONST "#CHKZ",#CHKZ:ADD_CONST "#CHKR",#CHKR:ADD_CONST "#CHKS",#CHKS:ADD_CONST "#CHKC",#CHKC:ADD_CONST "#CHKV",#CHKV:ADD_CONST "#CHKUV",#CHKUV:ADD_CONST "#CHKI",#CHKI:ADD_CONST "#T_DEFAULT",#T_DEFAULT:ADD_CONST "#T_INT",#T_INT:ADD_CONST "#T_REAL",#T_REAL:ADD_CONST "#T_STR",#T_STR:ADD_CONST "#T_INTARRAY",#T_INTARRAY:ADD_CONST "#T_REALARRAY",#T_REALARRAY:ADD_CONST "#T_STRARRAY",#T_STRARRAY:ADD_CONST "#G_NORMAL",#G_NORMAL:ADD_CONST "#G_NORMAL2",#G_NORMAL2:ADD_CONST "#G_ALPHA",#G_ALPHA:ADD_CONST "#G_ALPHA2",#G_ALPHA2:ADD_CONST "#G_ADD",#G_ADD:ADD_CONST "#BQAPF",#BQAPF:ADD_CONST "#BQLPF",#BQLPF:ADD_CONST "#BQHPF",#BQHPF:ADD_CONST "#BQBPF",#BQBPF:ADD_CONST "#BQBSF",#BQBSF:ADD_CONST "#BQLSF",#BQLSF:ADD_CONST "#BQHSF",#BQHSF:ADD_CONST "#BQPEQ",#BQPEQ:ADD_CONST "#WFRECT",#WFRECT:ADD_CONST "#WFHAMM",#WFHAMM:ADD_CONST "#WFHANN",#WFHANN:ADD_CONST "#WFBLKM",#WFBLKM:ADD_CONST "#AOPADD",#AOPADD:ADD_CONST "#AOPSUB",#AOPSUB:ADD_CONST "#AOPMUL",#AOPMUL:ADD_CONST "#AOPDIV",#AOPDIV:ADD_CONST "#AOPMAD",#AOPMAD:ADD_CONST "#AOPLIP",#AOPLIP:ADD_CONST "#AOPCLP",#AOPCLP:ADD_CONST "#EFCOFF",#EFCOFF:ADD_CONST "#EFCON",#EFCON:ADD_CONST "#EFCBATH",#EFCBATH:ADD_CONST "#EFCCAVE",#EFCCAVE:ADD_CONST "#EFCSPACE",#EFCSPACE:ADD_CONST "#EFCREFSROOM",#EFCREFSROOM:ADD_CONST "#EFCREFLROOM",#EFCREFLROOM:ADD_CONST "#EFCREFHALL",#EFCREFHALL:ADD_CONST "#EFCREFCAVE",#EFCREFCAVE:ADD_CONST "#EFCREFNONE",#EFCREFNONE:ADD_CONST "#EFCREVROOM",#EFCREVROOM:ADD_CONST "#EFCREVHALL",#EFCREVHALL:ADD_CONST "#EFCREVMETAL",#EFCREVMETAL:ADD_CONST "#EFCREVCAVE",#EFCREVCAVE:ADD_CONST "#EFCREVREV",#EFCREVREV:ADD_CONST "#PVLEFT",#PVLEFT:ADD_CONST "#PVRIGHT",#PVRIGHT:ADD_CONST "#GRPWIDTH",#GRPWIDTH:ADD_CONST "#GRPHEIGHT",#GRPHEIGHT:ADD_CONST "#GRPF",#GRPF:ADD_CONST "#GSPRITE",#GSPRITE:ADD_CONST "#TCONSOLE",#TCONSOLE:ADD_CONST "#MAXT",#MAXT:ADD_CONST "#MAXSP",#MAXSP:ADD_CONST "#MAXGRP",#MAXGRP:ADD_CONST "#HARDWARE",#HARDWARE:ADD_CONST "#VERSION",#VERSION

 ADD_CONST "#_SLOT",0
 ADD_CONST "#_LINE",0
 ADD_CONST "#_FILENAME",""
END
DEF NEW_CONST(C)
 VAR N$
 PUSH CMP_CONST_TYP,0
 PUSH CMP_CONST%,0
 PUSH CMP_CONST#,0
 PUSH CMP_CONST$,N$
 VAR L=LAST(CMP_CONST%)
 CASE TYPEOF(C)
 WHEN #T_INT
  CMP_CONST%[L]=C
  CMP_CONST_TYP[L]=#VMT_INT
 WHEN #T_REAL
  CMP_CONST#[L]=C
  CMP_CONST_TYP[L]=#VMT_REAL
 WHEN #T_STR
  CMP_CONST$[L]=C
  CMP_CONST_TYP[L]=#VMT_STR
 ENDCASE
 RETURN L
END
DEF INIT_COMPILER
 CMP_STRICT=#FALSE
 CMP_DEFINT=#FALSE
 CMP_GVARTBL=NEW_SPLAY_TREE()
 CMP_GLBLTBL=NEW_SPLAY_TREE()
 CMP_FUNCTBL=NEW_SPLAY_TREE()
 CMP_CONSTTBL=NEW_SPLAY_TREE()
 CMP_GVARNUM=1
 CMP_BREAK=EMPTY()
 CMP_CONTINUE=EMPTY()
 CMP_DATA%=ARRAY%(0)
 CMP_DATA#=ARRAY#(0)
 CMP_DATA$=ARRAY$(0)
 CMP_DATA_TYP=ARRAY%(0)
 INIT_COMPILER_VAR
 INIT_COMPILER_LABEL
 INIT_COMPILER_FUNC
 INIT_COMPILER_CONST
END
DEF ADD_DATA V
 VAR N$
 PUSH CMP_DATA%,0
 PUSH CMP_DATA#,0
 PUSH CMP_DATA$,N$
 PUSH CMP_DATA_TYP,0
 CASE TYPEOF(V)
 WHEN #T_INT
  CMP_DATA_TYP[LAST(CMP_DATA_TYP)]=#VMT_INT
  CMP_DATA%[LAST(CMP_DATA%)]=V
 WHEN #T_REAL
  CMP_DATA_TYP[LAST(CMP_DATA_TYP)]=#VMT_REAL
  CMP_DATA#[LAST(CMP_DATA#)]=V
 WHEN #T_STR
  CMP_DATA_TYP[LAST(CMP_DATA_TYP)]=#VMT_STR
  CMP_DATA$[LAST(CMP_DATA$)]=V
 OTHERWISE
  INTERNAL_COMPILER_ERROR
 ENDCASE
END
DEF DETER_VAR_TYPE NAME$,ARY OUT TYP
 CASE RIGHT$(NAME$,1)
 WHEN "$"
  IF ARY THEN
   TYP=#VMT_STRARRAY
  ELSE
   TYP=#VMT_STR
  ENDIF
 WHEN "%"
  IF ARY THEN
   TYP=#VMT_INTARRAY
  ELSE
   TYP=#VMT_INT
  ENDIF
 WHEN "#"
  IF ARY THEN
   TYP=#VMT_REALARRAY
  ELSE
   TYP=#VMT_REAL
  ENDIF
 OTHERWISE
  IF CMP_DEFINT THEN
   IF ARY THEN
    TYP=#VMT_INTARRAY
   ELSE
    TYP=#VMT_INT
   ENDIF
  ELSE
   IF ARY THEN
    TYP=#VMT_REALARRAY
   ELSE
    TYP=#VMT_REAL
   ENDIF
  ENDIF
 ENDCASE
END
DEF DEFINE_VAR NAME$,ARY OUT IDX,LOCAL
 VAR TYP
 DETER_VAR_TYPE NAME$,ARY OUT TYP
 IF CMP_CURFUNC THEN
  SPLAY_INSERT% FUNC_VARTBL[CMP_CURFUNC],NAME$,NEW_VAR(FUNC_VARNUM[CMP_CURFUNC],TYP)
  INC FUNC_VARNUM[CMP_CURFUNC]
  IDX=FUNC_VARNUM[CMP_CURFUNC]-1
  LOCAL=#TRUE
 ELSE
  SPLAY_INSERT% CMP_GVARTBL,NAME$,NEW_VAR(CMP_GVARNUM,TYP)
  INC CMP_GVARNUM
  LOCAL=#FALSE
  IDX=CMP_GVARNUM-1
 ENDIF
END
DEF GET_VAR_INDEX NAME$ OUT IDX,LOCAL
 VAR FOUND,V
 IF CMP_CURFUNC THEN
  LOCAL=#TRUE
  SPLAY_GET% FUNC_VARTBL[CMP_CURFUNC],NAME$ OUT FOUND,V
 ENDIF
 IF !FOUND THEN
  LOCAL=#FALSE
  SPLAY_GET% CMP_GVARTBL,NAME$ OUT FOUND,V
 ENDIF
 IF !FOUND THEN
  IF CMP_STRICT THEN
   UNDEFINED_VARIABLE_ERROR
  ENDIF
  DEFINE_VAR NAME$,#FALSE OUT IDX,LOCAL
 ELSE
  IDX=VAR_IDX[V]
 ENDIF
END
DEF DEFINE_LABEL NAME$
 'TODO:LOCAL
 VAR FOUND
 VAR TBL
 IF CMP_CURFUNC THEN
  TBL=FUNC_LBLTBL[CMP_CURFUNC]
 ELSE
  TBL=CMP_GLBLTBL
 ENDIF
 SPLAY_GET% TBL,NAME$ OUT FOUND,
 IF FOUND THEN
  DUPLICATE_LABEL NAME$
 ENDIF
 SPLAY_INSERT% TBL,NAME$,NEW_LABEL(COMPILER_CURRENT_ADDR(),LEN(CMP_DATA_TYP))
END
DEF COMPILE AST
 COMPILE_STATEMENTS AST
END
DEF COMPILE_STATEMENTS A
 VAR I
 CASE AST_TYP[A]
 WHEN #AST_STATEMENTS
  I=AST_NEXT[AST_LEFT[A]]
  WHILE I
   IF!I THEN BREAK
   COMPILE_STATEMENT AST_LEFT[I]
   I=AST_NEXT[I]
  WEND
 OTHERWISE
  COMPILE_ERROR
 ENDCASE
END
DEF COMPILE_STATEMENT A
 CASE AST_TYP[A]
 WHEN #AST_PRINT
  COMPILE_PRINT A
 WHEN #AST_ASSIGN
  COMPILE_EXPR AST_RIGHT[A]
  COMPILE_REFEXPR AST_LEFT[A]
  EMIT_ASSIGN
 'A1:EXPR
 'A2:THEN STATEMENTS
 'A3:ELSEIF STATEMENTS
 'A4:ELSE STATEMENTS
 WHEN #AST_IF
  COMPILE_IF A
 WHEN #AST_FOR
  COMPILE_FOR A
 WHEN #AST_BREAK
  COMPILE_BREAK
 WHEN #AST_CONTINUE
  COMPILE_CONTINUE
 WHEN #AST_WHILE
  COMPILE_WHILE A
 WHEN #AST_REPEAT
  COMPILE_REPEAT A
 WHEN #AST_LOOP
  COMPILE_LOOP A
 WHEN #AST_LABEL
  COMPILE_LABEL A
 WHEN #AST_GOTO
  COMPILE_GOTO A
 WHEN #AST_GOSUB
  COMPILE_GOSUB A
 WHEN #AST_GOTOEXPR
  COMPILE_GOTOEXPR A
 WHEN #AST_GOSUBEXPR
  COMPILE_GOSUBEXPR A
 WHEN #AST_ONGOTO
  COMPILE_ONGOTO A
 WHEN #AST_ONGOSUB
  COMPILE_ONGOSUB A
 WHEN #AST_ONBREAKGOTO
  COMPILE_ONBREAKGOTO A
 WHEN #AST_ONBREAKGOTOEXPR
  COMPILE_ONBREAKGOTOEXPR A
 WHEN #AST_RETURN
  COMPILE_RETURN A
 WHEN #AST_CALLFUNC
  COMPILE_CALLFUNC A
 WHEN #AST_DEF
  COMPILE_DEF A
 WHEN #AST_RETURNFUNC
  COMPILE_RETURNFUNC A
 WHEN #AST_DEFVAR
  COMPILE_DEFVAR A
 WHEN #AST_END
  COMPILE_END A
 WHEN #AST_OPTIONSTRICT
  CMP_STRICT=#TRUE
 WHEN #AST_OPTIONDEFINT
  CMP_DEFINT=#TRUE
 WHEN #AST_DATA
  COMPILE_DATA A
 WHEN #AST_CONST
  COMPILE_CONST A
 WHEN #AST_ENUM
  COMPILE_ENUM A
 WHEN #AST_READ
  COMPILE_READ A
 WHEN #AST_RESTORE
  COMPILE_RESTORE A
 WHEN #AST_RESTOREEXPR
  COMPILE_RESTOREEXPR A
 WHEN #AST_CALLSPRITE
  EMIT_CALLSPRITE
 WHEN #AST_CALLTEXT
  EMIT_CALLTEXT
 WHEN #AST_TPRINT
  COMPILE_TPRINT A
 OTHERWISE
  ?AST_STR$(AST_TYP[A])
  COMPILE_ERROR
 ENDCASE
END
DEF COMPILE_TPRINT A
 ?"FIXME:TPRINT"
END
DEF COMPILE_PRINT A
 VAR I=AST_NEXT[AST_LEFT[A]]
 IF !I THEN
  EMIT_PRINT_E
 ENDIF
 WHILE I
  IF!I THEN BREAK
  COMPILE_EXPR AST_LEFT[I]
  CASE AST_TYP[I]
  WHEN #AST_PRINT_EXPR_COMMA
   EMIT_PRINT_COMMA
  WHEN #AST_PRINT_EXPR_NEWLINE
   EMIT_PRINT
  WHEN #AST_PRINT_EXPR_SEMI
   EMIT_PRINT_SEMI
  ENDCASE
  I=AST_NEXT[I]
 WEND
END
DEF FOLD_CONSTEXPR_ARGS(A)
 VAR I=AST_NEXT[A]
 DIM RESULT[]
 WHILE I
  PUSH RESULT,FOLD_CONSTEXPR(AST_A1[I])
  I=AST_NEXT[I]
 WEND
 RETURN RESULT
END
DEF AST_IS_NUM(A)
 RETURN AST_TYP[A]==#AST_IMM_INT||AST_TYP[A]==#AST_IMM_DBL
END
DEF AST_IMM(A)
 CASE AST_TYP[A]
 WHEN #AST_IMM_INT
  RETURN AST%[A]
 WHEN #AST_IMM_DBL
  RETURN AST#[A]
 WHEN #AST_IMM_STR
  RETURN AST$[A]
 OTHERWISE
  STOP
 ENDCASE
END
DEF FOLD_CONSTEXPR(A)
 IF !A THEN RETURN 0
 CASE AST_TYP[A]
 WHEN #AST_IMM_INT
 WHEN #AST_IMM_DBL
 WHEN #AST_IMM_STR
  RETURN A
 WHEN #AST_CONSTVAR
  VAR FOUND,C
  SPLAY_GET% CMP_CONSTTBL,AST$[A] OUT FOUND,C
  IF!FOUND THEN
   UNDEFINED_CONSTANT AST$[A]
  ELSE
   CASE CMP_CONST_TYP[C]
   WHEN #VMT_INT
    RETURN NEW_AST_INT(#AST_IMM_INT,CMP_CONST%[C])
   WHEN #VMT_REAL
    RETURN NEW_AST_DBL(#AST_IMM_DBL,CMP_CONST#[C])
   WHEN #VMT_STR
    RETURN NEW_AST_STR(#AST_IMM_STR,CMP_CONST$[C])
   OTHERWISE
    INTERNAL_COMPILER_ERROR
   ENDCASE
  ENDIF
 WHEN #AST_CALLFUNCEXPR
  VAR ARGS=FOLD_CONSTEXPR_ARGS(AST_A1[A])
  CASE AST$[A]
  WHEN "RGB"
   IF LEN(ARGS)!=3&&LEN(ARGS)!=4 THEN
    RETURN A
   ENDIF
   IF AST_IS_NUM(ARGS[0])&&AST_IS_NUM(ARGS[1])&&AST_IS_NUM(ARGS[2])THEN
    IF LEN(ARGS)==4 THEN
     IF!AST_IS_NUM(ARGS[3])THEN
      RETURN A
     ELSE
      RETURN NEW_AST_INT(#AST_IMM_INT,RGB(AST_IMM(ARGS[0]),AST_IMM(ARGS[1]),AST_IMM(ARGS[2]),AST_IMM(ARGS[3])))
     ENDIF
    ENDIF
    RETURN NEW_AST_INT(#AST_IMM_INT,RGB(AST_IMM(ARGS[0]),AST_IMM(ARGS[1]),AST_IMM(ARGS[2])))
   ELSE
    RETURN A
   ENDIF
  WHEN "DEG"
   IF ARGS!=1 THEN
    RETURN A
   ENDIF
   RETURN NEW_AST_DBL(#AST_IMM_DBL,DEG(AST_IMM(ARGS[0])))
  WHEN "RAD"
   IF ARGS!=1 THEN
    RETURN A
   ENDIF
   RETURN NEW_AST_DBL(#AST_IMM_DBL,RAD(AST_IMM(ARGS[0])))
  WHEN "CHR$"
   IF ARGS!=1 THEN
    RETURN A
   ENDIF
   RETURN NEW_AST_STR(#AST_IMM_STR,RAD(AST_IMM(ARGS[0])))
  ENDCASE
 WHEN #AST_UNAOP
  VAR L=FOLD_CONSTEXPR(AST_LEFT[A])
  IF AST_IS_NUM(L) THEN
   CASE AST%[A]
   WHEN #TKN_LNOT
    RETURN NEW_AST_IMM(!L)
   WHEN #TKN_MINUS
    RETURN NEW_AST_IMM(-L)
   WHEN #TKN_NOT
    RETURN NEW_AST_IMM(NOT L)
   ENDCASE
  ELSE
   RETURN A
  ENDIF
 OTHERWISE
  NOTIMPL
 ENDCASE
END
DEF COMPILE_RESTORE A
 IF LEN(AST$[A])THEN
  EMIT_RESTORE_PLACEHOLDER AST$[A]
 ELSE
  EMIT_RESTORE 0
 ENDIF
END
DEF COMPILE_RESTOREEXPR A
 COMPILE_EXPR AST_LEFT[A]
 EMIT_RESTOREEXPR
END
DEF COMPILE_GOTOEXPR A
 COMPILE_EXPR AST_LEFT[A]
 EMIT_GOTOEXPR
END
DEF COMPILE_GOSUBEXPR A
 COMPILE_EXPR AST_LEFT[A]
 EMIT_GOSUBEXPR
END
DEF COMPILE_READ A
 VAR I=AST_NEXT[AST_A1[A]]
 WHILE I
  COMPILE_REFEXPR AST_A1[I]
  ' BAD:READ->EVAL REFEXPR->ASSIGN
  'GOOD:EVAL REFEXPR->READ->ASSIGN
  EMIT_READ
  I=AST_NEXT[I]
 WEND
END
DEF COMPILE_DATA A
 VAR I=AST_NEXT[AST_A1[A]]
 WHILE I
  VAR EXPR=FOLD_CONSTEXPR(AST_A1[I])
  CASE AST_TYP[EXPR]
  WHEN #AST_IMM_INT
   ADD_DATA AST%[EXPR]
  WHEN #AST_IMM_DBL
   ADD_DATA AST#[EXPR]
  WHEN #AST_IMM_STR
   ADD_DATA AST$[EXPR]
  OTHERWISE
   SYNTAX_ERROR "DATA"
  ENDCASE
  I=AST_NEXT[I]
 WEND
END
DEF ADD_CONST N$,C
 VAR FOUND
 SPLAY_GET% CMP_CONSTTBL,N$ OUT FOUND,
 IF FOUND THEN
  DUPLICATE_CONSTANT N$
  RETURN
 ENDIF
 SPLAY_INSERT% CMP_CONSTTBL,N$,NEW_CONST(C)
END
DEF COMPILE_END A
 EMIT_END
END
DEF COMPILE_CONST A
 VAR I=AST_NEXT[AST_A1[A]]
 WHILE I
  VAR NAME$=AST$[I]
  VAR EXPR=FOLD_CONSTEXPR(AST_A1[I])
  CASE AST_TYP[EXPR]
  WHEN #AST_IMM_INT
   ADD_CONST NAME$,AST%[EXPR]
  WHEN #AST_IMM_DBL
   ADD_CONST NAME$,AST#[EXPR]
  WHEN #AST_IMM_STR
   ADD_CONST NAME$,AST$[EXPR]
  OTHERWISE
   SYNTAX_ERROR "CONST"
  ENDCASE
  I=AST_NEXT[I]
 WEND
END
DEF COMPILE_ENUM A
 VAR I=AST_NEXT[AST_A1[A]]
 VAR C%
 WHILE I
  VAR NAME$=AST$[I]
  VAR EXPR=FOLD_CONSTEXPR(AST_A1[I])
  IF!EXPR THEN
   ADD_CONST NAME$,C%
   INC C%
  ELSE
   CASE AST_TYP[EXPR]
   WHEN #AST_IMM_INT
    C%=AST%[EXPR]
    ADD_CONST NAME$,C%
    INC C%
   WHEN #AST_IMM_DBL
   WHEN #AST_IMM_STR
    SYNTAX_ERROR "TYPE MISMATCH"
   OTHERWISE
    SYNTAX_ERROR "ENUM"
   ENDCASE
  ENDIF
  I=AST_NEXT[I]
 WEND
END
DEF COMPILE_DEFVAR A
 'A1:LIST
  '$:NAME
  'A1:INIT EXPR
  'A2:ARRAY DIM
  'A3:ARRAY INIT LIST 
 'LEFT TO RIGHT
 VAR I=AST_NEXT[AST_A1[A]]
 WHILE I
  VAR NAME$=AST$[I]
  VAR IDX,LOCAL,ARY
  IF AST_A2[I] THEN
   ARY=#TRUE
  ENDIF
  DEFINE_VAR NAME$,ARY OUT IDX,LOCAL
  IF AST_A1[I] THEN
   COMPILE_EXPR AST_A1[I]
   'FIXME:EXTRACT FUNCTION
   IF LOCAL THEN
    EMIT_PUSHLVARREF IDX
   ELSE
    EMIT_PUSHVARREF IDX
   ENDIF
   EMIT_ASSIGN
  ELSEIF ARY THEN
   'RIGHT TO LEFT
   VAR DM=COMPILE_ARRAY_INDEX_EXPR(AST_A2[I])
   EMIT_NEWARRAY DM,DETER_VAR_TYPE(NAME$,#TRUE)
   IF LOCAL THEN
    EMIT_PUSHLVARREF IDX
   ELSE
    EMIT_PUSHVARREF IDX
   ENDIF
   EMIT_ASSIGN
   IF AST_A3[I]THEN
    'RIGHT TO LEFT
    VAR INITCOUNT=COMPILE_ARRAY_INDEX_EXPR(AST_A3[I])
    IF LOCAL THEN
     EMIT_PUSHLVARREF IDX
    ELSE
     EMIT_PUSHVARREF IDX
    ENDIF
    EMIT_REF
    EMIT_INITARRAY INITCOUNT
   ENDIF
  ENDIF
  I=AST_NEXT[I]
 WEND
END
'RET:DIM
DEF COMPILE_ARRAY_INDEX_EXPR(A)
 VAR I=AST_PREV[A]
 VAR DM
 WHILE I!=A
  INC DM
  COMPILE_EXPR AST_A1[I]
  I=AST_PREV[I]
 WEND
 RETURN DM
END
CONST #VM_LVAROFF=-6
DEF COMPILE_RETURNFUNC A
 VAR EXPR=AST_LEFT[A]
 IF EXPR THEN
  COMPILE_EXPR EXPR
  EMIT_PUSHLVARREF #VM_LVAROFF-FUNC_INCNT[CMP_CURFUNC]
  EMIT_ASSIGN
 ENDIF
 EMIT_RETURNFUNC
END
DEF COMPILE_DEF A
 '$:NAME
 'A1:IN LIST
 'A2:OUT LIST
 'A3:STATEMENTS
 'A4:HAS RETURN VALUE
 VAR SKIP=EMIT_BR()
 VAR FN$=AST$[A]
 VAR INCNT=0
 VAR I=AST_NEXT[AST_A1[A]]
 WHILE I
  I=AST_NEXT[I]
  INC INCNT
 WEND
 VAR OUTCNT
 I=AST_NEXT[AST_A2[A]]
 WHILE I
  I=AST_NEXT[I]
  INC OUTCNT
 WEND
 IF AST_A4[A] THEN
  INC OUTCNT
 ENDIF
 CMP_CURFUNC=DEFINE_FUNC(FN$,COMPILER_CURRENT_ADDR(),INCNT,OUTCNT)
 I=AST_NEXT[AST_A1[A]]
 VAR IDX=#VM_LVAROFF+1
 WHILE I
  DEC IDX
  DEFINE_LOCAL_VAR CMP_CURFUNC,AST$[I],IDX
  I=AST_NEXT[I]
 WEND
 I=AST_PREV[AST_A2[A]]
 WHILE I!=AST_A2[A]
  DEC IDX
  DEFINE_LOCAL_VAR CMP_CURFUNC,AST$[I],IDX
  I=AST_PREV[I]
 WEND
 COMPILE_STATEMENTS AST_A3[A]
 EMIT_RETURNFUNC
 EMIT_ADDR SKIP
 CMP_CURFUNC=0
END
DEF DEFINE_LOCAL_VAR FUNC,V$,IDX
 VAR FOUND
 SPLAY_GET% FUNC_VARTBL[FUNC],V$ OUT FOUND,
 IF FOUND THEN
  'NO ERROR!?
  'IF VER<4.0.2 THEN RETURN
  DUPLICATE_VARIABLE V$
  RETURN
 ENDIF
 SPLAY_INSERT% FUNC_VARTBL[FUNC],V$,NEW_VAR(IDX,#VMT_DEFAULT)
END
DEF DEFINE_FUNC(FN$,ADDR,INCNT,OUTCNT)
 VAR FOUND
 SPLAY_GET% CMP_FUNCTBL,FN$ OUT FOUND,
 IF FOUND THEN
  DUPLICATE_FUNC FN$
 ENDIF
 VAR F=NEW_FUNC(ADDR,INCNT,OUTCNT)
 SPLAY_INSERT% CMP_FUNCTBL,FN$,F
 RETURN F
END
DEF COMPILE_CALLFUNC A
 'A1:IN ARGS
 'A2:OUT ARGS
 VAR FN$=AST$[A]
 VAR INCNT=0
 VAR I
 VAR OUTCNT
 IF AST_TYP[A]==#AST_CALLFUNC THEN
  I=AST_NEXT[AST_A2[A]]
  WHILE I
   I=AST_NEXT[I]
   INC OUTCNT
  WEND
 ELSE
  OUTCNT=1
 ENDIF
 EMIT_PUSHEMPTY OUTCNT
 I=AST_PREV[AST_A1[A]]
 WHILE I!=AST_A1[A]
  COMPILE_EXPR AST_A1[I]
  I=AST_PREV[I]
  INC INCNT
 WEND
 EMIT_CALLFUNC FN$,INCNT,OUTCNT
 IF AST_TYP[A]==#AST_CALLFUNC THEN
  I=AST_PREV[AST_A2[A]]
  WHILE I!=AST_A2[A]
   COMPILE_REFEXPR AST_A1[I]
   EMIT_ASSIGN
   I=AST_PREV[I]
   INC OUTCNT
  WEND
 ENDIF
END
DEF COMPILE_IF A
 COMPILE_EXPR AST_A1[A]
 VAR ADDR_ELSE=EMIT_BRFALSE()
 COMPILE_STATEMENTS AST_A2[A]
 IF AST_A4[A]THEN
  VAR ADDR_ENDIF=EMIT_BR()
 ENDIF
 EMIT_ADDR ADDR_ELSE
 IF AST_A3[A]THEN'ELSEIF
  DIM BRLIST[0]
  VAR I=AST_NEXT[AST_A3[A]]
  WHILE I
   COMPILE_EXPR AST_A1[I]
   VAR ADDR_AFTER_ELSEIF=EMIT_BRFALSE()
   COMPILE_STATEMENTS AST_A2[I]
   I=AST_NEXT[I]
   PUSH BRLIST,EMIT_BR()
   EMIT_ADDR ADDR_AFTER_ELSEIF
  WEND
 ENDIF
 IF AST_A4[A]THEN'ELSE
  COMPILE_STATEMENTS AST_A4[A]
  EMIT_ADDR ADDR_ENDIF
 ENDIF
 IF AST_A3[A]THEN'ELSEIF
  FOR I=0TO LAST(BRLIST)
   EMIT_ADDR BRLIST[I]
  NEXT
 ENDIF
END
DEF COMPILE_CONTINUE
 IF TYPEOF(CMP_CONTINUE)!=#T_INTARRAY THEN
  SYNTAX_ERROR
  RETURN
 ENDIF
 PUSH CMP_CONTINUE,EMIT_BR()
END
DEF COMPILE_BREAK
 IF TYPEOF(CMP_CONTINUE)!=#T_INTARRAY THEN
  SYNTAX_ERROR
  RETURN
 ENDIF
 PUSH CMP_BREAK,EMIT_BR()
END
DEF COMPILE_FOR A
 'A1:INDEXREFEXPR
 'A2:INITEXPR
 'A3:TOEXPR
 'A4:STEPEXPR
 'A5:STATEMENTS
 VAR INDEXREF=AST_A1[A]
 VAR INITEXPR=AST_A2[A]
 VAR TOEXPR=AST_A3[A]
 VAR STEPEXPR=AST_A4[A]
 VAR STATEMENTS=AST_A5[A]
 COMPILE_EXPR INITEXPR
 COMPILE_REFEXPR INDEXREF
 EMIT_ASSIGN
 'FOR INDEXREF=INITEXPR TO TOEXPR STEP STEPEXPR
 'PUSH INITEXPR
 'PUSH INDEXREF
 'ASSIGN
 '@CONT
 'PUSH INDEXREF
 'PUSH STEPEXPR
 'PUSH TOEXPR
 '*FOR STEP INSTR* @BRK
 'STATEMENTS... (GOTO @CONT,@BRK
 'GOTO @CONT
 '@BRK


 'FOR INDEXREF=INITEXPR TO TOEXPR
 'PUSH INITEXPR
 'PUSH INDEXREF
 'ASSIGN
 '@CONT
 'PUSH INDEXREF
 'PUSH TOEXPR
 '*FOR INSTR* @BRK
 'STATEMENTS... (GOTO @CONT,@BRK
 'GOTO @CONT
 '@BRK
 COMPILE_REFEXPR INDEXREF
 IF STEPEXPR THEN
  COMPILE_EXPR STEPEXPR
 ELSE
  EMIT_PUSHINT 1
 ENDIF
 COMPILE_EXPR TOEXPR
 VAR BRKADDR
 BRKADDR=EMIT_FORINIT()
 VAR LOOPADDR=COMPILER_CURRENT_ADDR()
 VAR OLDC=CMP_CONTINUE
 VAR OLDB=CMP_BREAK
  CMP_CONTINUE=ARRAY%(0)
  CMP_BREAK=ARRAY%(0)
  COMPILE_STATEMENTS STATEMENTS
  VAR I
  FOR I=0TO LAST(CMP_CONTINUE)
   EMIT_ADDR CMP_CONTINUE[I]
  NEXT
  COMPILE_REFEXPR INDEXREF
  IF STEPEXPR THEN
   COMPILE_EXPR STEPEXPR
  ELSE
   EMIT_PUSHINT 1
  ENDIF
  COMPILE_EXPR TOEXPR
  VAR BRKADDR2
  BRKADDR2=EMIT_FOR()
  EMIT_ADDR BRKADDR
  EMIT_ADDR2 BRKADDR2,LOOPADDR
  FOR I=0TO LAST(CMP_BREAK)
   EMIT_ADDR CMP_BREAK[I]
  NEXT
 CMP_CONTINUE=OLDC
 CMP_BREAK=OLDB
END
DEF COMPILE_WHILE A
 VAR OLDC=CMP_CONTINUE
 VAR OLDB=CMP_BREAK
  CMP_CONTINUE=ARRAY%(0)
  CMP_BREAK=ARRAY%(0)
  VAR CONTADDR=COMPILER_CURRENT_ADDR()
  COMPILE_EXPR AST_A1[A]
  VAR BRL=EMIT_BRFALSE()
  COMPILE_STATEMENTS AST_A2[A]
  EMIT_ADDR2 EMIT_BR(),CONTADDR
  VAR I
  FOR I=0TO LAST(CMP_CONTINUE)
   EMIT_ADDR2 CMP_CONTINUE[I],CONTADDR
  NEXT
  FOR I=0TO LAST(CMP_BREAK)
   EMIT_ADDR CMP_BREAK[I]
  NEXT
  EMIT_ADDR BRL
 CMP_CONTINUE=OLDC
 CMP_BREAK=OLDB
END
DEF COMPILE_REPEAT A
 VAR OLDC=CMP_CONTINUE
 VAR OLDB=CMP_BREAK
  CMP_CONTINUE=ARRAY%(0)
  CMP_BREAK=ARRAY%(0)
  VAR LOOPADDR=COMPILER_CURRENT_ADDR()
  COMPILE_STATEMENTS AST_A2[A]
  VAR CONTADDR=COMPILER_CURRENT_ADDR()
  COMPILE_EXPR AST_A1[A]
  EMIT_ADDR2 EMIT_BRFALSE(),LOOPADDR
  VAR I
  FOR I=0TO LAST(CMP_CONTINUE)
   EMIT_ADDR2 CMP_CONTINUE[I],CONTADDR
  NEXT
  FOR I=0TO LAST(CMP_BREAK)
   EMIT_ADDR CMP_BREAK[I]
  NEXT
 CMP_CONTINUE=OLDC
 CMP_BREAK=OLDB
END
DEF COMPILE_LOOP A
 VAR OLDC=CMP_CONTINUE
 VAR OLDB=CMP_BREAK
  CMP_CONTINUE=ARRAY%(0)
  CMP_BREAK=ARRAY%(0)
  VAR CONTADDR=COMPILER_CURRENT_ADDR()
  COMPILE_STATEMENTS AST_A2[A]
  EMIT_ADDR2 EMIT_BR(),CONTADDR
  VAR I
  FOR I=0TO LAST(CMP_CONTINUE)
   EMIT_ADDR2 CMP_CONTINUE[I],CONTADDR
  NEXT
  FOR I=0TO LAST(CMP_BREAK)
   EMIT_ADDR CMP_BREAK[I]
  NEXT
 CMP_CONTINUE=OLDC
 CMP_BREAK=OLDB
END
DEF COMPILE_REFEXPR A
 CASE AST_TYP[A]
 WHEN #AST_VAR
  VAR IDX,LC
  GET_VAR_INDEX AST$[A] OUT IDX,LC
  IF LC THEN
   EMIT_PUSHLVARREF IDX
  ELSE
   EMIT_PUSHVARREF IDX
  ENDIF
 WHEN #AST_EMPTYEXPR
  EMIT_PUSHEMPTYREF
 WHEN #AST_BINOP
  VAR TYP=AST%[A]
  IF TYP!=#TKN_LB THEN
   SYNTAX_ERROR "EXPECTED '['"
   RETURN
  ENDIF
  VAR DM=COMPILE_ARRAY_INDEX_EXPR(AST_RIGHT[A])
  COMPILE_EXPR AST_LEFT[A]
  EMIT_PUSHARYREF DM
 OTHERWISE
  COMPILE_ERROR
 ENDCASE
END
DEF COMPILE_EXPR A
 CASE AST_TYP[A]
 WHEN #AST_BINOP
  VAR TYP=AST%[A]
  IF TYP==#TKN_LAND THEN
   COMPILE_EXPR AST_LEFT[A]
   VAR BR1=EMIT_BRAND()
   COMPILE_EXPR AST_RIGHT[A]
   VAR BR2=EMIT_BRAND()
   EMIT_PUSHINT #TRUE
   EMIT_ADDR BR1
   EMIT_ADDR BR2
  ELSEIF TYP==#TKN_LOR THEN
   COMPILE_EXPR AST_LEFT[A]
   BR1=EMIT_BROR()
   COMPILE_EXPR AST_RIGHT[A]
   BR2=EMIT_BROR()
   EMIT_PUSHINT #FALSE
   EMIT_ADDR BR1
   EMIT_ADDR BR2
  ELSEIF TYP==#TKN_LB THEN
   VAR DM=COMPILE_ARRAY_INDEX_EXPR(AST_RIGHT[A])
   COMPILE_EXPR AST_LEFT[A]
   EMIT_PUSHARYREF DM
   EMIT_REF
  ELSE
   COMPILE_EXPR AST_LEFT[A]
   COMPILE_EXPR AST_RIGHT[A]
   EMIT_BINOP AST%[A]
  ENDIF
 WHEN #AST_IMM_INT
  EMIT_PUSHINT AST%[A]
 WHEN #AST_IMM_DBL
  EMIT_PUSHDBL AST#[A]
 WHEN #AST_IMM_STR
  EMIT_PUSHSTR AST$[A]
 WHEN #AST_VAR
  COMPILE_REFEXPR A
  EMIT_REF
 WHEN #AST_CALLFUNCEXPR
  COMPILE_CALLFUNC A
 WHEN #AST_CONSTVAR
  COMPILE_EXPR FOLD_CONSTEXPR(A)
  VAR FOUND,C
  SPLAY_GET% CMP_CONSTTBL,AST$[A] OUT FOUND,C
  IF!FOUND THEN
   UNDEFINED_CONSTANT AST$[A]
  ELSE
   CASE CMP_CONST_TYP[C]
   WHEN #VMT_INT
    EMIT_PUSHINT CMP_CONST%[C]
   WHEN #VMT_REAL
    EMIT_PUSHDBL CMP_CONST#[C]
   WHEN #VMT_STR
    EMIT_PUSHSTR CMP_CONST$[C]
   OTHERWISE
    INTERNAL_COMPILER_ERROR
   ENDCASE
  ENDIF
 WHEN #AST_UNAOP
  COMPILE_EXPR AST_LEFT[A]
  EMIT_UNAOP AST%[A]
 WHEN #AST_EMPTYEXPR
  EMIT_PUSHEMPTY 1
 OTHERWISE
  ?AST_STR$(AST_TYP[A])
  COMPILE_ERROR
 ENDCASE
END
DEF COMPILE_LABEL A
 DEFINE_LABEL AST$[A]
END
DEF COMPILE_GOTO A
 EMIT_GOTO_PLACEHOLDER AST$[A]
END
DEF COMPILE_GOSUB A
 EMIT_GOSUB_PLACEHOLDER AST$[A]
END
DEF COMPILE_RETURN A
 EMIT_RETURN
END
DIM VM_OPS[]
DIM VM_IMM#[]
DIM VM_IMM$[]

DIM VM_STK_TYP[]
DIM VM_STK%[]
DIM VM_STK#[]
DIM VM_STK$[]
VAR VM_STK_SIZE
VAR VM_SP
VAR VM_BP
DIM VM_GVAR_TYP[]
DIM VM_GVAR%[]
DIM VM_GVAR#[]
DIM VM_GVAR$[]
VAR VM_GLBLTBL
VAR VM_FUNCTBL
VAR VM_PC

DIM VM_DATA_TYP[]
DIM VM_DATA%[]
DIM VM_DATA#[]
DIM VM_DATA$[]
DIM VM_DATA_IDX
VAR VM_CURFUNC

VAR VM_ALLOC_ARRAY
DEF VM_ALLOC_ARRAY(ARY)
 IF TYPEOF(ARY)==1 THEN
  STOP
 ENDIF
 SPVAR #GSPRITE,VM_ALLOC_ARRAY,ARY
 INC VM_ALLOC_ARRAY
 RETURN VM_ALLOC_ARRAY-1
END
DEF VM_FREE_ARRAY ARY
 SPVAR #GSPRITE,ARY,EMPTY()
END
DEF VM_GET_ARRAY(ARY)
 RETURN SPVAR(#GSPRITE,ARY)
END

DEF VM_GETFREE_ARRAY(ARY)
 VAR A=SPVAR(#GSPRITE,ARY)
' SPVAR #GSPRITE,ARY,EMPTY()
 RETURN A
END

DEF INIT_VM
 VM_OPS=ARRAY%(0)
 VM_IMM#=ARRAY#(0)
 VM_IMM$=ARRAY$(0)
 VM_STK_SIZE=65536
 VM_STK_TYP=ARRAY%(VM_STK_SIZE)
 VM_STK%=ARRAY%(VM_STK_SIZE)
 VM_STK#=ARRAY#(VM_STK_SIZE)
 VM_STK$=ARRAY$(VM_STK_SIZE)
END
DEF INIT_VM_RUN2 N
 IF !N THEN RETURN
 INIT_VM_RUN2 GET_SPLAYN_LEFT(N)
 VAR K$=GET_SPLAYN_KEY$(N)
 VAR V=GET_SPLAYN_VAL%(N)
 VM_GVAR_TYP[VAR_IDX[V]]=VAR_TYP[V]
 INIT_VM_RUN2 GET_SPLAYN_RIGHT(N)
END
DEF INIT_VM_RUN
 VM_GVAR_TYP=ARRAY%(CMP_GVARNUM)
 VM_GVAR%=ARRAY%(CMP_GVARNUM)
 VM_GVAR#=ARRAY#(CMP_GVARNUM)
 VM_GVAR$=ARRAY$(CMP_GVARNUM)
 INIT_VM_RUN2 GET_SPLAY_ROOT(CMP_GVARTBL)
 VM_PC=0
 VM_GLBLTBL=CMP_GLBLTBL
 VM_FUNCTBL=CMP_FUNCTBL

 VM_DATA_IDX=0
 VM_DATA_TYP=CMP_DATA_TYP
 VM_DATA%=CMP_DATA%
 VM_DATA#=CMP_DATA#
 VM_DATA$=CMP_DATA$
 VM_CURFUNC=0
END
ENUM\
 #VM_NOP,\
 #VM_PUSHINT,\
 #VM_PUSHDBL,\
 #VM_PUSHSTR,\
 #VM_BINOP,\
 #VM_PRINT_E,\
 #VM_PRINT,\
 #VM_PRINT_COMMA,\
 #VM_PRINT_SEMI,\
 #VM_ASSIGN,\
 #VM_PUSHVARREF,\
 #VM_PUSHLVARREF,\
 #VM_REF,\
 #VM_BR,\
 #VM_BRTRUE,\
 #VM_BRFALSE,\
 #VM_FOR,\
 #VM_FORINIT,\
 #VM_BRAND,\
 #VM_BROR,\
 #VM_GOTO_PLACEHOLDER,\
 #VM_GOSUB_PLACEHOLDER,\
 #VM_GOSUB,\
 #VM_GOTOEXPR,\
 #VM_GOSUBEXPR,\
 #VM_ONGOTO,\
 #VM_ONGOSUB,\
 #VM_RETURN,\
 #VM_CALLFUNC,\
 #VM_PUSHEMPTY,\
 #VM_RETURNFUNC,\
 #VM_PUSHEMPTYREF,\
 #VM_PUSHARYREF,\
 #VM_END,\
 #VM_NEWARRAY,\
 #VM_INITARRAY,\
 #VM_READ,\
 #VM_RESTORE,\
 #VM_RESTORE_PLACEHOLDER,\
 #VM_RESTOREEXPR,\
 #VM_UNAOP,\
 #VM_CALLSPRITE,\
 #VM_CALLTEXT,\
 #VM_,\
 #VM_LAST

DEF EMIT_PUSHINT V
 PUSH VM_OPS,#VM_PUSHINT
 PUSH VM_OPS,V
END
DEF VM_ADDIMMDBL(V#)
 PUSH VM_IMM#,V#
 RETURN LAST(VM_IMM#)
END
DEF VM_ADDIMMSTR(V$)
 PUSH VM_IMM$,V$
 RETURN LAST(VM_IMM$)
END
DEF EMIT_PUSHDBL V#
 PUSH VM_OPS,#VM_PUSHDBL
 PUSH VM_OPS,VM_ADDIMMDBL(V#)
END
DEF EMIT_PUSHSTR V$
 PUSH VM_OPS,#VM_PUSHSTR
 PUSH VM_OPS,VM_ADDIMMSTR(V$)
END
DEF EMIT_BINOP TYP
 PUSH VM_OPS,#VM_BINOP
 PUSH VM_OPS,TYP
END
DEF EMIT_PRINT
 PUSH VM_OPS,#VM_PRINT
END
DEF EMIT_PRINT_E
 PUSH VM_OPS,#VM_PRINT_E
END
DEF EMIT_PRINT_COMMA
 PUSH VM_OPS,#VM_PRINT_COMMA
END
DEF EMIT_PRINT_SEMI
 PUSH VM_OPS,#VM_PRINT_COMMA
END
DEF EMIT_PUSHVARREF IDX
 PUSH VM_OPS,#VM_PUSHVARREF
 PUSH VM_OPS,IDX
END
DEF EMIT_PUSHLVARREF IDX
 PUSH VM_OPS,#VM_PUSHLVARREF
 PUSH VM_OPS,IDX
END
DEF EMIT_REF
 PUSH VM_OPS,#VM_REF
END
DEF EMIT_ASSIGN
 PUSH VM_OPS,#VM_ASSIGN
END
DEF EMIT_BRFALSE()
 PUSH VM_OPS,#VM_BRFALSE
 PUSH VM_OPS,&H7FFFFFFF
 RETURN LAST(VM_OPS)
END
DEF EMIT_BRTRUE()
 PUSH VM_OPS,#VM_BRTRUE
 PUSH VM_OPS,&H7FFFFFFF
 RETURN LAST(VM_OPS)
END
DEF EMIT_BR()
 PUSH VM_OPS,#VM_BR
 PUSH VM_OPS,&H7FFFFFFF
 RETURN LAST(VM_OPS)
END
DEF EMIT_FOR()
 PUSH VM_OPS,#VM_FOR
 PUSH VM_OPS,&H7FFFFFFF
 RETURN LAST(VM_OPS)
END
DEF EMIT_FORINIT()
 PUSH VM_OPS,#VM_FORINIT
 PUSH VM_OPS,&H7FFFFFFF
 RETURN LAST(VM_OPS)
END
DEF EMIT_BRAND()
 PUSH VM_OPS,#VM_BRAND
 PUSH VM_OPS,&H7FFFFFFF
 RETURN LAST(VM_OPS)
END
DEF EMIT_BROR()
 PUSH VM_OPS,#VM_BROR
 PUSH VM_OPS,&H7FFFFFFF
 RETURN LAST(VM_OPS)
END
DEF EMIT_ADDR ADDR
 VM_OPS[ADDR]=LEN(VM_OPS)
END
DEF EMIT_ADDR2 ADDR,ADDR2
 VM_OPS[ADDR]=ADDR2
END
DEF EMIT_GOTO_PLACEHOLDER LABEL$
 PUSH VM_OPS,#VM_GOTO_PLACEHOLDER
 PUSH VM_OPS,VM_ADDIMMSTR(LABEL$)
END
DEF EMIT_GOSUB_PLACEHOLDER LABEL$
 PUSH VM_OPS,#VM_GOSUB_PLACEHOLDER
 PUSH VM_OPS,VM_ADDIMMSTR(LABEL$)
END
DEF EMIT_RETURN
 PUSH VM_OPS,#VM_RETURN
END
DEF EMIT_CALLFUNC FN$,INCNT,OUTCNT
 PUSH VM_OPS,#VM_CALLFUNC
 PUSH VM_OPS,VM_ADDIMMSTR(FN$)
 PUSH VM_OPS,INCNT
 PUSH VM_OPS,OUTCNT
END
DEF EMIT_RETURNFUNC
 PUSH VM_OPS,#VM_RETURNFUNC
END
DEF EMIT_PUSHEMPTY N
 PUSH VM_OPS,#VM_PUSHEMPTY
 PUSH VM_OPS,N
END
DEF EMIT_PUSHEMPTYREF
 PUSH VM_OPS,#VM_PUSHEMPTYREF
END
DEF EMIT_END
 PUSH VM_OPS,#VM_END
END
DEF EMIT_NEWARRAY DM,TYP
 PUSH VM_OPS,#VM_NEWARRAY
 PUSH VM_OPS,DM
 PUSH VM_OPS,TYP
END
DEF EMIT_INITARRAY CNT
 PUSH VM_OPS,#VM_INITARRAY
 PUSH VM_OPS,CNT
END
DEF EMIT_PUSHARYREF DM
 PUSH VM_OPS,#VM_PUSHARYREF
 PUSH VM_OPS,DM
END
DEF EMIT_READ
 PUSH VM_OPS,#VM_READ
END
DEF EMIT_RESTORE_PLACEHOLDER LABEL$
 PUSH VM_OPS,#VM_RESTORE_PLACEHOLDER
 PUSH VM_OPS,VM_ADDIMMSTR(LABEL$)
END
DEF EMIT_RESTORE ADDR
 PUSH VM_OPS,#VM_RESTORE
 PUSH VM_OPS,ADDR
END
DEF EMIT_UNAOP TYP
 PUSH VM_OPS,#VM_UNAOP
 PUSH VM_OPS,TYP
END
DEF EMIT_CALLSPRITE
 PUSH VM_OPS,#VM_CALLSPRITE
END
DEF EMIT_CALLTEXT
 PUSH VM_OPS,#VM_CALLTEXT
END
DEF EMIT_RESTOREEXPR
 PUSH VM_OPS,#VM_RESTOREEXPR
END
DEF EMIT_GOTOEXPR
 PUSH VM_OPS,#VM_GOTOEXPR
END
DEF EMIT_GOSUBEXPR
 PUSH VM_OPS,#VM_GOSUBEXPR
END
DEF COMPILER_CURRENT_ADDR()
 RETURN LEN(VM_OPS)
END
DEF VM_PUSHINT V%
 VM_STK_TYP[VM_SP]=#VMT_INT
 VM_STK%[VM_SP]=V%
 INC VM_SP
END
DEF VM_PUSHDBL V#
 VM_STK_TYP[VM_SP]=#VMT_REAL
 VM_STK#[VM_SP]=V#
 INC VM_SP
END
DEF VM_PUSHSTR V$
 VM_STK_TYP[VM_SP]=#VMT_STR
 VM_STK$[VM_SP]=V$
 INC VM_SP
END
DEF VM_V(TYP,V)
 IF TYP==#VMT_INTARRAY||TYP==#VMT_REALARRAY||TYP==#VMT_STRARRAY THEN
  V=VM_ALLOC_ARRAY(V)
 ENDIF
 RETURN V
END
DEF VM_GETV(TYP,V)
 IF TYP==#VMT_INTARRAY||TYP==#VMT_REALARRAY||TYP==#VMT_STRARRAY THEN
  V=VM_GETFREE_ARRAY(V)
 ENDIF
 RETURN V
END
DEF VM_PUSHTYP V,TYP
 VM_STK_TYP[VM_SP]=TYP
 VAR A=VM_GETSTKARY(TYP)
 IF TYP==#VMT_INTARRAY||TYP==#VMT_REALARRAY||TYP==#VMT_STRARRAY THEN
  V=VM_ALLOC_ARRAY(V)
 ENDIF
 A[VM_SP]=V
 INC VM_SP
END
DEF VM_PUSH V
 CASE TYPEOF(V)
 WHEN #T_INT
  VM_STK_TYP[VM_SP]=#VMT_INT
  VM_STK%[VM_SP]=V
 WHEN #T_REAL
  VM_STK_TYP[VM_SP]=#VMT_REAL
  VM_STK#[VM_SP]=V
 WHEN #T_STR
  VM_STK_TYP[VM_SP]=#VMT_STR
  VM_STK$[VM_SP]=V
 OTHERWISE
  STOP
 ENDCASE
 INC VM_SP
END
DEF VM_POP OUT T,V
 DEC VM_SP
 T=VM_STK_TYP[VM_SP]
 V=VM_GETSTKARY(T)[VM_SP]
 CASE T
 WHEN #VMT_INTARRAY
 WHEN #VMT_REALARRAY
 WHEN #VMT_STRARRAY
  V=VM_GETFREE_ARRAY(V)
 ENDCASE
END
DEF VM_POPV OUT V
 DEC VM_SP
 VAR T=VM_STK_TYP[VM_SP]
 V=VM_GETSTKARY(T)[VM_SP]
 CASE T
 WHEN #VMT_INTARRAY
 WHEN #VMT_REALARRAY
 WHEN #VMT_STRARRAY
  V=VM_GETFREE_ARRAY(V)
 ENDCASE
END
DEF VM_POPUNSAFE OUT T,V
 DEC VM_SP
 T=VM_STK_TYP[VM_SP]
 CASE T
 WHEN #VMT_ARYREF
 WHEN #VMT_EMPTYREF
 WHEN #VMT_SUBROUTINE
 WHEN #VMT_VARREF
 WHEN #VMT_LVARREF
 WHEN #VMT_INT
  V=VM_STK%[VM_SP]
 WHEN #VMT_REAL
  V=VM_STK#[VM_SP]
 WHEN #VMT_STR
  V=VM_STK$[VM_SP]
 OTHERWISE
  STOP
 ENDCASE
END
DEF VMINSTR_BINOP T
 VAR LT,LV
 VAR RT,RV
 VM_POP OUT RT,RV
 VM_POP OUT LT,LV
 CASE T
 WHEN #TKN_PLUS
  VM_PUSH LV+RV
 WHEN #TKN_MINUS
  VM_PUSH LV-RV
 WHEN #TKN_MUL
  VM_PUSH LV*RV
 WHEN #TKN_DIV
  VM_PUSH LV/RV
 WHEN #TKN_DIVINT
  VM_PUSH LV DIV RV
 WHEN #TKN_MOD
  VM_PUSH LV MOD RV
 WHEN #TKN_AND
  VM_PUSH LV AND RV
 WHEN #TKN_EQ
  VM_PUSH LV==RV
 OTHERWISE
  STOP
 ENDCASE
END
DEF VMINSTR_UNAOP T
 VAR LT,LV
 VM_POP OUT LT,LV
 CASE T
 WHEN #TKN_MINUS
  VM_PUSH -LV
 WHEN #TKN_LNOT
  VM_PUSH !LV
 WHEN #TKN_NOT
  VM_PUSH NOT LV
 OTHERWISE
  STOP
 ENDCASE
END
DEF VM_PRINT_E
 ?
END

DEF VM_PRINT
 VAR V
 VM_POP OUT ,V
 ?V
END
DEF VM_PRINT_COMMA
 VAR V
 VM_POP OUT ,V
 ?V,
END
DEF VM_PRINT_SEMI
 VAR V
 VM_POP OUT ,V
 ?V;
END
DEF VMINSTR_PUSHVARREF IDX
 VM_PUSHTYP IDX,#VMT_VARREF
END
DEF VMINSTR_PUSHLVARREF IDX
 VM_PUSHTYP IDX,#VMT_LVARREF
END
DEF VM_GETVAR(IDX)
 VAR TYP=VM_GVAR_TYP[IDX]
 CASE TYP
 WHEN #VMT_REAL
  RETURN VM_GVAR#[IDX]
 WHEN #VMT_INT
  RETURN VM_GVAR%[IDX]
 WHEN #VMT_STR
  RETURN VM_GVAR$[IDX]
 ENDCASE
 VM_ERROR
END
DEF VM_GETVAR2 RTYP,IDX OUT TYP,V
 TYP=VM_GVAR_TYP[IDX]
 IF RTYP!=#VMT_VARREF THEN ERROR
 CASE TYP
 WHEN #VMT_REAL
  V=VM_GVAR#[IDX]
  RETURN
 WHEN #VMT_INT
  V=VM_GVAR%[IDX]
  RETURN
 WHEN #VMT_STR
  V=VM_GVAR$[IDX]
  RETURN
 ENDCASE
 VM_ERROR
END
DEF VM_SETVAR IDX,TYP,V
 VM_GVAR_TYP[IDX]=TYP
 CASE TYP
 WHEN #VMT_REAL
  VM_GVAR#[IDX]=V
 WHEN #VMT_INT
  VM_GVAR%[IDX]=V
 WHEN #VMT_STR
  VM_GVAR$[IDX]=V
 WHEN #VMT_DEFAULT
  RETURN
 OTHERWISE
  VM_ERROR_NOTIMPL
 ENDCASE
END
DEF VM_GETSTKARY(TYP)
 CASE TYP
 WHEN #VMT_REAL
  RETURN VM_STK#
 WHEN #VMT_ARYREF
 WHEN #VMT_INTARRAY
 WHEN #VMT_REALARRAY
 WHEN #VMT_STRARRAY
 WHEN #VMT_EMPTYREF
 WHEN #VMT_VARREF
 WHEN #VMT_LVARREF
 WHEN #VMT_INT
 WHEN #VMT_SUBROUTINE
  RETURN VM_STK%
 WHEN #VMT_STR
  RETURN VM_STK$
 OTHERWISE
  STOP
 ENDCASE
END
DEF VM_GETLVAR IDX OUT T,V
 T=VM_STK_TYP[VM_BP+IDX]
 V=VM_GETV(T,VM_GETSTKARY(T)[VM_BP+IDX])
END
DEF VM_SETSTK IDX,V
 VAR T=VM_TYPE(V)
 VM_STK_TYP[IDX]=T
 VAR A=VM_GETSTKARY(T)
 A[IDX]=VM_V(T,V)
END
DEF VM_SETLVAR IDX,T,V
 VM_STK_TYP[VM_BP+IDX]=T
 VAR A=VM_GETSTKARY(T)
 A[VM_BP+IDX]=VM_V(T,V)
END
DEF VM_TYPE(V)
 CASE TYPEOF(V)
 WHEN #T_DEFAULT
  RETURN #VMT_DEFAULT
 WHEN #T_INT
  RETURN #VMT_INT
 WHEN #T_REAL
  RETURN #VMT_REAL
 WHEN #T_STR
  RETURN #VMT_STR
 WHEN #T_INTARRAY
  RETURN #VMT_INTARRAY
 WHEN #T_REALARRAY
  RETURN #VMT_REALARRAY
 WHEN #T_STRARRAY
  RETURN #VMT_STRARRAY
 OTHERWISE
  STOP
 ENDCASE
END
DEF VMINSTR_REF
 VAR T,V
 VM_POPUNSAFE OUT T,V
 CASE T
 WHEN #VMT_VARREF
  VM_PUSH VM_GETVAR(V)
 WHEN #VMT_LVARREF
  VM_GETLVAR V OUT T,V
  VM_PUSHTYP V,T
 WHEN #VMT_ARYREF
  VAR DM1,DM2,DM3,DM4
  VAR ARYT,ARYV
  VM_POP OUT ARYT,ARYV
  IF!VM_ISARYTYP(ARYT)THEN
   TYPE_MISMATCH "ARRAY EXPECTED BUT "+VMT_STR$(ARYT)
   RETURN
  ENDIF
  VM_POP_DIMS V OUT DM1,DM2,DM3,DM4
  CASE V
  WHEN 1
   VM_PUSH ARYV[DM1]
  WHEN 2
   VM_PUSH ARYV[DM1,DM2]
  WHEN 3
   VM_PUSH ARYV[DM1,DM2,DM3]
  WHEN 4
   VM_PUSH ARYV[DM1,DM2,DM3,DM4]
  OTHERWISE
   INTERNAL_VM_ERROR
  ENDCASE
 OTHERWISE
  INTERNAL_VM_ERROR
 ENDCASE
END
DEF VMINSTR_ASSIGN
 VAR T,V
 VAR REFT,REFV
 VM_POPUNSAFE OUT REFT,REFV
 VM_ASSIGN REFT,REFV,#TRUE,T,V
END
DEF VM_ASSIGN REFT,REFV,POP,T,V
 CASE REFT
 WHEN #VMT_LVARREF
  IF POP THEN VM_POP OUT T,V
  VM_SETLVAR REFV,T,V
 WHEN #VMT_VARREF
  IF POP THEN VM_POP OUT T,V
  VM_SETVAR REFV,T,V
 WHEN #VMT_EMPTYREF
  RETURN
 WHEN #VMT_ARYREF
  VAR DM1,DM2,DM3,DM4
  VAR ARYT,ARYV
  VM_POP OUT ARYT,ARYV
  IF!VM_ISARYTYP(ARYT)THEN
   TYPE_MISMATCH "ARRAY EXPECTED BUT "+VMT_STR$(ARYT)
   RETURN
  ENDIF
  VM_POP_DIMS REFV OUT DM1,DM2,DM3,DM4
  IF POP THEN VM_POP OUT T,V
  CASE REFV
  WHEN 1
   ARYV[DM1]=V
  WHEN 2
   ARYV[DM1,DM2]=V
  WHEN 3
   ARYV[DM1,DM2,DM3]=V
  WHEN 4
   ARYV[DM1,DM2,DM3,DM4]=V
  OTHERWISE
   INTERNAL_VM_ERROR
  ENDCASE
 OTHERWISE
  INTERNAL_VM_ERROR
 ENDCASE
END
DEF VM_ISNUMTYPE(TYP)
 RETURN TYP==#VMT_INT||TYP==#VMT_REAL
END
DEF VM_FOR INIT
 VAR BRKADDR=VM_OPS[VM_PC]
 INC VM_PC
 VAR T_TO,V_TO
 VAR T_STEP=#VMT_INT,V_STEP=1
 VAR RT_IDX,RV_IDX
 VAR T_IDX,V_IDX
 VM_POP OUT T_TO,V_TO
 VM_POP OUT T_STEP,V_STEP
 VM_POPUNSAFE OUT RT_IDX,RV_IDX
 VM_GETVAR2 RT_IDX,RV_IDX OUT T_IDX,V_IDX
 IF!VM_ISNUMTYPE(T_IDX)||!VM_ISNUMTYPE(T_STEP)||!VM_ISNUMTYPE(T_TO) THEN
  TYPEMISMATCH "FOR"
 ENDIF
 IF !INIT THEN
  V_IDX=V_IDX+V_STEP
  VM_SETVAR RV_IDX,T_IDX,V_IDX
 ENDIF
 IF V_STEP>0&&V_IDX>V_TO THEN
  IF INIT THEN
   VM_PC=BRKADDR
  ENDIF
 ELSEIF V_STEP<0&&V_IDX<V_TO THEN
  IF INIT THEN
   VM_PC=BRKADDR
  ENDIF
 ELSE
  IF !INIT THEN
   VM_PC=BRKADDR
  ENDIF
 ENDIF
END
DEF VMINSTR_BRAND ADDR
 VAR T,V
 VM_POP OUT T,V
 IF!VM_ISNUMTYPE(T) THEN
  TYPEMISMATCH "&&"
 ENDIF
 IF !V THEN
  VM_PUSHINT #FALSE
  VM_PC=ADDR
 ENDIF
END
DEF VMINSTR_BROR ADDR
 VAR T,V
 VM_POP OUT T,V
 IF!VM_ISNUMTYPE(T) THEN
  TYPEMISMATCH "||"
 ENDIF
 IF V THEN
  VM_PC=ADDR
  VM_PUSHINT #TRUE
 ENDIF
END
DEF VM_GET_LABEL_ADDR(LABEL$)
 VAR FOUND,ADDR
 VAR TBL
 IF VM_CURFUNC THEN
  TBL=FUNC_LBLTBL[VM_CURFUNC]
 ELSE
  TBL=VM_GLBLTBL
 ENDIF
 SPLAY_GET% TBL,LABEL$ OUT FOUND,ADDR
 IF !FOUND THEN
  UNDEFINED_LABEL LABEL$
 ENDIF
 RETURN LABEL_ADDR[ADDR]
END
DEF VM_GET_LABEL_DATA_ADDR(LABEL$)
 VAR FOUND,ADDR
 IF VM_CURFUNC THEN
  SPLAY_GET% FUNC_LBLTBL[VM_CURFUNC],LABEL$ OUT FOUND,ADDR
 ENDIF
 IF !FOUND THEN
  SPLAY_GET% VM_GLBLTBL,LABEL$ OUT FOUND,ADDR
 ENDIF
 IF !FOUND THEN
  IF !FOUND THEN
   UNDEFINED_LABEL LABEL$
  ENDIF
 ENDIF
 RETURN LABEL_DATA_ADDR[ADDR]
END
DEF VMINSTR_GOTO_PLACEHOLDER
 VAR ADDR=VM_GET_LABEL_ADDR(VM_IMM$[VM_OPS[VM_PC]])
 VM_OPS[VM_PC-1]=#VM_BR
 VM_OPS[VM_PC]=ADDR
 VM_PC=ADDR
END
DEF VMINSTR_GOSUB_PLACEHOLDER
 VAR ADDR=VM_GET_LABEL_ADDR(VM_IMM$[VM_OPS[VM_PC]])
 VM_OPS[VM_PC-1]=#VM_GOSUB
 VM_OPS[VM_PC]=ADDR
 DEC VM_PC
END
DEF VMINSTR_GOSUB
 VAR ADDR=VM_OPS[VM_PC]
 VAR RETADDR=VM_PC+1
 VM_PUSHTYP RETADDR,#VMT_SUBROUTINE
 VM_PC=ADDR
END
DEF VMINSTR_RETURN
 VAR T,V
 VM_POPUNSAFE OUT T,V
 IF T!=#VMT_SUBROUTINE THEN
  RETURN_WITHOUT_GOSUB
  RETURN
 ENDIF
 VM_PC=V
END
'FUNC A1,A2,A3 OUT B1,B2,B3
'PUSHEMPTY 3
'PUSH A3
'PUSH A2
'PUSH A1
'CALL FUNC
'STACK
'-1:ADDR
'-1:BP
'-2:INCNT
'-3:OUTCNT
'-4:A1
'-5:A2
'-6:A3
'-7:B1
'-6:B2
'-8:B3
'RET FUNC
'-1:B1
'-2:B2
'-3:B3
ENUM\
 #VMSTK_STARTARGS=#VM_LVAROFF,\
 #VMSTK_OUTCNT,\
 #VMSTK_INCNT,\
 #VMSTK_FUNC,\
 #VMSTK_BP,\
 #VMSTK_PC
DEF VMINSTR_PUSHEMPTY N
 FILL VM_STK_TYP,#VMT_DEFAULT,VM_SP,N
 INC VM_SP,N
END
DEF VM_GETFUNC NAME$,INCNT1,OUTCNT1 OUT FOUND,FUNC
 SPLAY_GET% VM_FUNCTBL,NAME$ OUT FOUND,FUNC
 RETURN
END
DEF GENERATE_NATIVE_RELAY
 VAR I,O
 VAR R$=""
 VAR IM=9,OM=9
 PUSH R$,"DEF RELAY_NATIVE_FUNC N$,I,O"
 PUSH R$,CHR$(10)
 PUSH R$," VAR "
 FOR O=1TO OM
  PUSH R$,"O"
  PUSH R$,STR$(O)
  PUSH R$,","
 NEXT
 PUSH R$,CHR$(10)
 PUSH R$," ON I*"+STR$(OM+1)+"+O GOTO "
 FOR I=0TO IM
  FOR O=0TO OM
   PUSH R$,"@I"
   PUSH R$,STR$(I)
   PUSH R$,"O"
   PUSH R$,STR$(O)
   'TAILING COMMA NOT ALLOWED
   IF I!=IM||O!=OM THEN
    PUSH R$,","
   ENDIF
  NEXT
 NEXT
 PUSH R$,CHR$(10)
 FOR I=0TO IM
  FOR O=0TO OM
   PUSH R$," @I"
   PUSH R$,STR$(I)
   PUSH R$,"O"
   PUSH R$,STR$(O)
   PUSH R$,":"
   PUSH R$,"CALL N$"
   VAR I2
   FOR I2=1TO I
    PUSH R$,",VM_POPV()
   NEXT
   FOR I2=1TO O
    IF I2==1 THEN
     PUSH R$," OUT O1"
    ELSE
     PUSH R$,",O"
     PUSH R$,STR$(I2)
    ENDIF
   NEXT
   PUSH R$,":"
   FOR I2=1TO O
    PUSH R$,"VM_SETSTK VM_SP-"
    PUSH R$,STR$(I2)
    PUSH R$,",O"
    PUSH R$,STR$(O+1-I2)
    PUSH R$,":"
   NEXT
   PUSH R$,"RETURN"
   PUSH R$,CHR$(10)
  NEXT
 NEXT
 PUSH R$,"END"
 PUSH R$,CHR$(10)
 CLIPBOARD R$
END




DEF RELAY_NATIVE_FUNC N$,I,O
 VAR O1,O2,O3,O4,O5,O6,O7,O8,O9,
 ON I*10+O GOTO @I0O0,@I0O1,@I0O2,@I0O3,@I0O4,@I0O5,@I0O6,@I0O7,@I0O8,@I0O9,@I1O0,@I1O1,@I1O2,@I1O3,@I1O4,@I1O5,@I1O6,@I1O7,@I1O8,@I1O9,@I2O0,@I2O1,@I2O2,@I2O3,@I2O4,@I2O5,@I2O6,@I2O7,@I2O8,@I2O9,@I3O0,@I3O1,@I3O2,@I3O3,@I3O4,@I3O5,@I3O6,@I3O7,@I3O8,@I3O9,@I4O0,@I4O1,@I4O2,@I4O3,@I4O4,@I4O5,@I4O6,@I4O7,@I4O8,@I4O9,@I5O0,@I5O1,@I5O2,@I5O3,@I5O4,@I5O5,@I5O6,@I5O7,@I5O8,@I5O9,@I6O0,@I6O1,@I6O2,@I6O3,@I6O4,@I6O5,@I6O6,@I6O7,@I6O8,@I6O9,@I7O0,@I7O1,@I7O2,@I7O3,@I7O4,@I7O5,@I7O6,@I7O7,@I7O8,@I7O9,@I8O0,@I8O1,@I8O2,@I8O3,@I8O4,@I8O5,@I8O6,@I8O7,@I8O8,@I8O9,@I9O0,@I9O1,@I9O2,@I9O3,@I9O4,@I9O5,@I9O6,@I9O7,@I9O8,@I9O9
 @I0O0:CALL N$:RETURN
 @I0O1:CALL N$ OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I0O2:CALL N$ OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I0O3:CALL N$ OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I0O4:CALL N$ OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I0O5:CALL N$ OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I0O6:CALL N$ OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I0O7:CALL N$ OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I0O8:CALL N$ OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I0O9:CALL N$ OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I1O0:CALL N$,VM_POPV():RETURN
 @I1O1:CALL N$,VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I1O2:CALL N$,VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I1O3:CALL N$,VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I1O4:CALL N$,VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I1O5:CALL N$,VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I1O6:CALL N$,VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I1O7:CALL N$,VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I1O8:CALL N$,VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I1O9:CALL N$,VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I2O0:CALL N$,VM_POPV(),VM_POPV():RETURN
 @I2O1:CALL N$,VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I2O2:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I2O3:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I2O4:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I2O5:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I2O6:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I2O7:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I2O8:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I2O9:CALL N$,VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I3O0:CALL N$,VM_POPV(),VM_POPV(),VM_POPV():RETURN
 @I3O1:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I3O2:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I3O3:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I3O4:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I3O5:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I3O6:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I3O7:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I3O8:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I3O9:CALL N$,VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I4O0:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV():RETURN
 @I4O1:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I4O2:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I4O3:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I4O4:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I4O5:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I4O6:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I4O7:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I4O8:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I4O9:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I5O0:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV():RETURN
 @I5O1:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I5O2:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I5O3:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I5O4:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I5O5:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I5O6:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I5O7:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I5O8:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I5O9:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I6O0:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV():RETURN
 @I6O1:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I6O2:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I6O3:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I6O4:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I6O5:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I6O6:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I6O7:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I6O8:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I6O9:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I7O0:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV():RETURN
 @I7O1:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I7O2:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I7O3:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I7O4:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I7O5:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I7O6:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I7O7:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I7O8:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I7O9:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I8O0:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV():RETURN
 @I8O1:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I8O2:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I8O3:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I8O4:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I8O5:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I8O6:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I8O7:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I8O8:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I8O9:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
 @I9O0:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV():RETURN
 @I9O1:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1:VM_SETSTK VM_SP-1,O1:RETURN
 @I9O2:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2:VM_SETSTK VM_SP-1,O2:VM_SETSTK VM_SP-2,O1:RETURN
 @I9O3:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3:VM_SETSTK VM_SP-1,O3:VM_SETSTK VM_SP-2,O2:VM_SETSTK VM_SP-3,O1:RETURN
 @I9O4:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4:VM_SETSTK VM_SP-1,O4:VM_SETSTK VM_SP-2,O3:VM_SETSTK VM_SP-3,O2:VM_SETSTK VM_SP-4,O1:RETURN
 @I9O5:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5:VM_SETSTK VM_SP-1,O5:VM_SETSTK VM_SP-2,O4:VM_SETSTK VM_SP-3,O3:VM_SETSTK VM_SP-4,O2:VM_SETSTK VM_SP-5,O1:RETURN
 @I9O6:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6:VM_SETSTK VM_SP-1,O6:VM_SETSTK VM_SP-2,O5:VM_SETSTK VM_SP-3,O4:VM_SETSTK VM_SP-4,O3:VM_SETSTK VM_SP-5,O2:VM_SETSTK VM_SP-6,O1:RETURN
 @I9O7:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7:VM_SETSTK VM_SP-1,O7:VM_SETSTK VM_SP-2,O6:VM_SETSTK VM_SP-3,O5:VM_SETSTK VM_SP-4,O4:VM_SETSTK VM_SP-5,O3:VM_SETSTK VM_SP-6,O2:VM_SETSTK VM_SP-7,O1:RETURN
 @I9O8:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8:VM_SETSTK VM_SP-1,O8:VM_SETSTK VM_SP-2,O7:VM_SETSTK VM_SP-3,O6:VM_SETSTK VM_SP-4,O5:VM_SETSTK VM_SP-5,O4:VM_SETSTK VM_SP-6,O3:VM_SETSTK VM_SP-7,O2:VM_SETSTK VM_SP-8,O1:RETURN
 @I9O9:CALL N$,VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV(),VM_POPV() OUT O1,O2,O3,O4,O5,O6,O7,O8,O9:VM_SETSTK VM_SP-1,O9:VM_SETSTK VM_SP-2,O8:VM_SETSTK VM_SP-3,O7:VM_SETSTK VM_SP-4,O6:VM_SETSTK VM_SP-5,O5:VM_SETSTK VM_SP-6,O4:VM_SETSTK VM_SP-7,O3:VM_SETSTK VM_SP-8,O2:VM_SETSTK VM_SP-9,O1:RETURN
END








DEF CALL_NATIVE_FUNC NAME$,INCNT,OUTCNT
 VAR O1,O2,O3,O4,O5,O6,O7,O8,O9
 ON INCNT GOTO @I0,@I1,@I2,@I3,@I4,@I5,@I6,@I7,@I8,@I9
 ERR:RETURN
 @I0
 ON OUTCNT GOTO @I0O0,@I0O1,@I0O2,@I0O3,@I0O4,@I0O5,@I0O6,@I0O7,@I0O8,@I0O9
 ERR:RETURN
 @I0O0
 CALL NAME$
 @I0O1
 CALL NAME$ OUT O1
 VM_SETSTK VM_SP-1,O1
 RETURN
 @I0O2
 CALL NAME$ OUT O1,O2
 VM_SETSTK VM_SP-1,O2
 VM_SETSTK VM_SP-2,O1
 RETURN
 @I1
 ON OUTCNT GOTO @I1O0,@I1O1,@I1O2,@I1O3,@I1O4,@I1O5,@I1O6,@I1O7,@I1O8,@I1O9
 ERR:RETURN
 @I1O0
 CALL NAME$,VM_POPV():RETURN
 @I1O1
 CALL NAME$,VM_POPV() OUT O1
 VM_SETSTK VM_SP-1,O1
 RETURN
END
DEF VMINSTR_CALLFUNC
 VAR NAME$=VM_IMM$[VM_OPS[VM_PC]]
 INC VM_PC
 VAR INCNT=VM_OPS[VM_PC]
 INC VM_PC
 VAR OUTCNT=VM_OPS[VM_PC]
 INC VM_PC
 VAR ADDR
 VAR FUNC,INCNTF,OUTCNTF,FOUND
 VM_GETFUNC NAME$,INCNT,OUTCNT OUT FOUND,FUNC
 IF !FOUND THEN
  IF CHKCALL(NAME$)THEN
   RELAY_NATIVE_FUNC NAME$,INCNT,OUTCNT
   RETURN
  ENDIF
  SYNTAX_ERROR "UNDEFINED FUNCTION "+NAME$
  RETURN
 ENDIF
 IF (FUNC_INCNT[FUNC]!=-1&&FUNC_INCNT[FUNC]!=INCNT)||\
    (FUNC_OUTCNT[FUNC]!=-1&&FUNC_OUTCNT[FUNC]!=OUTCNT)THEN
  MISSING_PARAMETER NAME$
  RETURN
 ENDIF
 VM_PUSHINT FUNC_OUTCNT[FUNC]
 VM_PUSHINT FUNC_INCNT[FUNC]
 VM_PUSHINT VM_CURFUNC
 VM_PUSHINT VM_BP
 VM_PUSHINT VM_PC
 VM_BP=VM_SP
 VM_PC=FUNC_ADDR[FUNC]
 INC VM_SP,FUNC_VARNUM[FUNC]
 VM_CURFUNC=FUNC
END
DEF VM_ASSERT *
 IF DEFARG(0)THEN
  RETURN
 ELSE
  IF DEFARGC()==1 THEN
   ?"Assertion failed(VM)"
  ELSEIF DEFARGC()==2 THEN
   ?"Assertion failed(VM) ";DEFARG(1)
  ELSE
   ?"Assertion failed(VM) MISSING PARAMETER(ASSERT)"
  ENDIF
 ENDIF
END
DEF VMINSTR_RETURNFUNC
 VM_SP=VM_BP
 VAR RETADDR_T,RETADDR_V
 VM_POPUNSAFE OUT RETADDR_T,RETADDR_V
 VM_ASSERT RETADDR_T==#VMT_INT
 VAR OLDBP_T,OLDBP_V
 VM_POPUNSAFE OUT OLDBP_T,OLDBP_V
 VM_ASSERT OLDBP_T==#VMT_INT
 VAR OLDFUNC_T,OLDFUNC_V
 VM_POPUNSAFE OUT OLDFUNC_T,OLDFUNC_V
 VM_ASSERT OLDFUNC_T==#VMT_INT
 VM_CURFUNC=OLDFUNC_V
 VAR INCNT_T,OUTCNT_T
 VAR INCNT_V,OUTCNT_V
 VM_POPUNSAFE OUT INCNT_T,INCNT_V
 VM_POPUNSAFE OUT OUTCNT_T,OUTCNT_V
 VM_ASSERT INCNT_T==#VMT_INT
 VM_ASSERT OUTCNT_T==#VMT_INT
 DEC VM_SP,INCNT_V
 VM_PC=RETADDR_V
END
DEF VMINSTR_PUSHEMPTYREF
 VM_PUSHTYP 0,#VMT_EMPTYREF
END
DEF VM_POP_DIMS DM OUT DM1,DM2,DM3,DM4
 VAR T
 IF DM>=1 THEN
  VM_POP OUT T,DM1
  IF!VM_ISNUMTYPE(T) THEN
   TYPE_MISMATCH "ARRAY DIM"
  ENDIF
 ENDIF
 IF DM>=2 THEN
  VM_POP OUT T,DM2
  IF!VM_ISNUMTYPE(T) THEN
   TYPE_MISMATCH "ARRAY DIM"
  ENDIF
 ENDIF
 IF DM>=3 THEN
  VM_POP OUT T,DM3
  IF!VM_ISNUMTYPE(T) THEN
   TYPE_MISMATCH "ARRAY DIM"
  ENDIF
 ENDIF
 IF DM>=4 THEN
  VM_POP OUT T,DM4
  IF!VM_ISNUMTYPE(T) THEN
   TYPE_MISMATCH "ARRAY DIM"
  ENDIF
 ENDIF
END
DEF VMINSTR_NEWARRAY
 VAR DM=VM_OPS[VM_PC]
 INC VM_PC
 VAR TYP=VM_OPS[VM_PC]
 INC VM_PC
 VAR V
 VAR DM1,DM2,DM3,DM4
 VAR T
 VM_POP_DIMS DM OUT DM1,DM2,DM3,DM4
 CASE TYP
 WHEN #VMT_INTARRAY
  CASE DM
  WHEN 1
   V=ARRAY%(DM1)
  WHEN 2
   V=ARRAY%(DM1,DM2)
  WHEN 3
   V=ARRAY%(DM1,DM2,DM3)
  WHEN 4
   V=ARRAY%(DM1,DM2,DM3,DM4)
  ENDCASE
 WHEN #VMT_REALARRAY
  CASE DM
  WHEN 1
   V=ARRAY#(DM1)
  WHEN 2
   V=ARRAY#(DM1,DM2)
  WHEN 3
   V=ARRAY#(DM1,DM2,DM3)
  WHEN 4
   V=ARRAY#(DM1,DM2,DM3,DM4)
  ENDCASE
 WHEN #VMT_STRARRAY
  CASE DM
  WHEN 1
   V=ARRAY$(DM1)
  WHEN 2
   V=ARRAY$(DM1,DM2)
  WHEN 3
   V=ARRAY$(DM1,DM2,DM3)
  WHEN 4
   V=ARRAY$(DM1,DM2,DM3,DM4)
  ENDCASE
 OTHERWISE
  VM_ERROR
 ENDCASE
 VM_PUSHTYP V,TYP
END
DEF VM_ISARYTYP(T)
 RETURN T==#VMT_INTARRAY||T==#VMT_REALARRAY||T==#VMT_STRARRAY
END
DEF VM_ISSCALARTYP(T)
 RETURN T==#VMT_INT||T==#VMT_REAL||T==#VMT_STR
END
DEF VMINSTR_PUSHARYREF
 VAR DM=VM_OPS[VM_PC]
 INC VM_PC
 VM_PUSHTYP DM,#VMT_ARYREF
 RETURN
END
DEF VMINSTR_INITARRAY
 VAR CNT=VM_OPS[VM_PC]
 INC VM_PC
 VAR REFT,REFV
 VM_POP OUT REFT,REFV
 VAR I
 FOR I=0TO CNT-1
  VAR T,V
  VM_POP OUT T,V
  IF !VM_ISSCALARTYP(T) THEN
   TYPE_MISMATCH(T)
  ENDIF
  REFV[I]=V
 NEXT
END
DEF VMINSTR_READ
 VAR TYP=VM_DATA_TYP[VM_DATA_IDX]
 VAR V
 VAR REFT,REFV
 VM_POP OUT REFT,REFV
 CASE TYP
 WHEN #VMT_INT
  V=VM_DATA%[VM_DATA_IDX]
 WHEN #VMT_REAL
  V=VM_DATA#[VM_DATA_IDX]
 WHEN #VMT_STR
  V=VM_DATA$[VM_DATA_IDX]
 OTHERWISE
  INTERNAL_VM_ERROR
 ENDCASE
 VM_ASSIGN REFT,REFV,#FALSE,TYP,V
 INC VM_DATA_IDX
END
DEF VMINSTR_RESTORE
 VM_DATA_IDX=VM_OPS[VM_PC]
 INC VM_PC
END
DEF VMINSTR_RESTORE_PLACEHOLDER
 VAR ADDR=VM_GET_LABEL_DATA_ADDR(VM_IMM$[VM_OPS[VM_PC]])
 VM_OPS[VM_PC-1]=#VM_RESTORE
 VM_OPS[VM_PC]=ADDR
 DEC VM_PC
END
DEF VMINSTR_RESTOREEXPR
 VAR T,V
 VM_POP OUT T,V
 IF T!=#VMT_STR THEN
  TYPE_MISMATCH "RESTORE"
 ENDIF
 VM_DATA_IDX=VM_GET_LABEL_DATA_ADDR(V)
END
DEF VMINSTR_GOTOEXPR
 VAR T,V
 VM_POP OUT T,V
 IF T!=#VMT_STR THEN
  TYPE_MISMATCH "RESTORE"
 ENDIF
 VM_PC=VM_GET_LABEL_ADDR(V)
END
DEF VMINSTR_GOSUBEXPR
 VAR T,V
 VM_POP OUT T,V
 IF T!=#VMT_STR THEN
  TYPE_MISMATCH "RESTORE"
 ENDIF
 VM_GOSUB VM_GET_LABEL_ADDR(V)
END
DEF VM_RUN
 VAR T,V
 VM_PC=0
 INIT_VM_RUN
 LOOP
  IF LEN(VM_OPS)<=VM_PC THEN BREAK
  VAR C=VM_OPS[VM_PC]
  INC VM_PC
  CASE C
  WHEN #VM_PUSHINT
   VM_PUSHINT VM_OPS[VM_PC]
   INC VM_PC
  WHEN #VM_PUSHDBL
   VM_PUSHDBL VM_IMM#[VM_OPS[VM_PC]]
   INC VM_PC
  WHEN #VM_PUSHSTR
   VM_PUSHSTR (VM_IMM$[VM_OPS[VM_PC]])+""
   INC VM_PC
  WHEN #VM_BINOP
   T=VM_OPS[VM_PC]
   INC VM_PC
   VMINSTR_BINOP T
  WHEN #VM_PRINT_E
   VM_PRINT_E
  WHEN #VM_PRINT
   VM_PRINT
  WHEN #VM_PRINT_COMMA
   VM_PRINT_COMMA
  WHEN #VM_PRINT_SEMI
   VM_PRINT_SEMI
  WHEN #VM_PUSHVARREF
   VMINSTR_PUSHVARREF VM_OPS[VM_PC]
   INC VM_PC
  WHEN #VM_PUSHLVARREF
   VMINSTR_PUSHLVARREF VM_OPS[VM_PC]
   INC VM_PC
  WHEN #VM_REF
   VMINSTR_REF
  WHEN #VM_ASSIGN
   VMINSTR_ASSIGN
  WHEN #VM_BR
   VM_PC=VM_OPS[VM_PC]-1
   INC VM_PC
  WHEN #VM_BRFALSE
   VM_POP OUT T,V
   CASE T
   WHEN #VMT_INT
   WHEN #VMT_REAL
    IF !V THEN VM_PC=VM_OPS[VM_PC]-1
   OTHERWISE
    TYPEMISMATCH
   ENDCASE
   INC VM_PC
  WHEN #VM_BRTRUE
   VM_POP OUT T,V
   CASE T
   WHEN #VMT_INT
   WHEN #VMT_REAL
    IF V THEN VM_PC=VM_OPS[VM_PC]-1
   OTHERWISE
    TYPEMISMATCH
   ENDCASE
   INC VM_PC
  WHEN #VM_FOR
   VM_FOR #FALSE
  WHEN #VM_FORINIT
   VM_FOR #TRUE
  WHEN #VM_BROR
   INC VM_PC
   VMINSTR_BROR VM_OPS[VM_PC-1]
  WHEN #VM_BRAND
   INC VM_PC
   VMINSTR_BRAND VM_OPS[VM_PC-1]
  WHEN #VM_GOTO_PLACEHOLDER
   VMINSTR_GOTO_PLACEHOLDER
  WHEN #VM_GOSUB_PLACEHOLDER
   VMINSTR_GOSUB_PLACEHOLDER
  WHEN #VM_GOSUB
   INC VM_PC
   VM_GOSUB VM_OPS[VM_PC-1]
  WHEN #VM_RETURN
   VMINSTR_RETURN
  WHEN #VM_CALLFUNC
   VMINSTR_CALLFUNC
  WHEN #VM_PUSHEMPTY
   INC VM_PC
   VMINSTR_PUSHEMPTY VM_OPS[VM_PC-1]
  WHEN #VM_RETURNFUNC
   VMINSTR_RETURNFUNC
  WHEN #VM_PUSHEMPTYREF
   VMINSTR_PUSHEMPTYREF
  WHEN #VM_END
   BREAK
  WHEN #VM_NEWARRAY
   VMINSTR_NEWARRAY
  WHEN #VM_PUSHARYREF
   VMINSTR_PUSHARYREF
  WHEN #VM_INITARRAY
   VMINSTR_INITARRAY
  WHEN #VM_READ
   VMINSTR_READ
  WHEN #VM_RESTORE
   VMINSTR_RESTORE
  WHEN #VM_RESTORE_PLACEHOLDER
   VMINSTR_RESTORE_PLACEHOLDER
  WHEN #VM_UNAOP
   VMINSTR_UNAOP
  WHEN #VM_CALLSPRITE
   CALL SPRITE
  WHEN #VM_CALLTEXT
   CALL TEXT
  WHEN #VM_RESTOREEXPR
   VMINSTR_RESTOREEXPR
  WHEN #VM_GOTOEXPR
   VMINSTR_GOTOEXPR
  WHEN #VM_GOSUBEXPR
   VMINSTR_GOSUBEXPR
  WHEN #VM_
   VMINSTR_
  OTHERWISE
   VM_ERROR
  ENDCASE
 ENDLOOP

END







DIM SPLAYN_LEFT[]
DIM SPLAYN_RIGHT[]
DIM SPLAYN_PARENT[]
DIM SPLAYN_KEY$[]
DIM SPLAYN_VAL$[]
DIM SPLAYN_VAL%[]
DIM SPLAYN_VAL#[]
DIM SPLAY_ROOT[]
VAR SPLAY_INIT

DEF INIT_SPLAY
 VAR S=1
 SPLAYN_LEFT=ARRAY%(S)
 SPLAYN_RIGHT=ARRAY%(S)
 SPLAYN_PARENT=ARRAY%(S)
 SPLAYN_KEY$=ARRAY$(S)
 SPLAYN_VAL$=ARRAY$(S)
 SPLAYN_VAL#=ARRAY%(S)
 SPLAYN_VAL%=ARRAY%(S)
 SPLAY_ROOT=ARRAY%(S)
 SPLAY_INIT=#TRUE
END

DEF NEW_SPLAY_TREE()
 IF!SPLAY_INIT THEN
  INIT_SPLAY
 ENDIF
 PUSH SPLAY_ROOT,0
 RETURN LAST(SPLAY_ROOT)
END
DEF NEW_SPLAYN(K$)
 PUSH SPLAYN_LEFT,0
 PUSH SPLAYN_RIGHT,0
 PUSH SPLAYN_PARENT,0
 PUSH SPLAYN_KEY$,K$
 VAR E$
 PUSH SPLAYN_VAL$,E$
 PUSH SPLAYN_VAL%,0
 PUSH SPLAYN_VAL#,0
 RETURN LAST(SPLAYN_LEFT)
END
DEF NEW_SPLAYN%(K$,V%)
 VAR S=NEW_SPLAYN(K$)
 SPLAYN_VAL%[S]=V%
 RETURN S
END
DEF NEW_SPLAYN#(K$,V#)
 VAR S=NEW_SPLAYN(K$)
 SPLAYN_VAL#[S]=V#
 RETURN S
END
DEF NEW_SPLAYN$(K$,V$)
 VAR S=NEW_SPLAYN(K$)
 SPLAYN_VAL$[S]=V$
 RETURN S
END

DEF SPLAY_LEFT_ROTATE S,X
 VAR Y=SPLAYN_RIGHT[X]
 IF Y THEN
  SPLAYN_RIGHT[X]=SPLAYN_LEFT[Y]
  IF SPLAYN_LEFT[Y] THEN
   SPLAYN_PARENT[SPLAYN_LEFT[Y]]=X
  ENDIF
  SPLAYN_PARENT[Y]=SPLAYN_PARENT[X]
 ENDIF
 IF !SPLAYN_PARENT[X] THEN
  SPLAY_ROOT[S]=Y
 ELSEIF X==SPLAYN_LEFT[SPLAYN_PARENT[X]] THEN
  SPLAYN_LEFT[SPLAYN_PARENT[X]]=Y
 ELSE
  SPLAYN_RIGHT[SPLAYN_PARENT[X]]=Y
 ENDIF
 IF Y THEN
  SPLAYN_LEFT[Y]=X
 ENDIF
 SPLAYN_PARENT[X]=Y
END

DEF SPLAY_RIGHT_ROTATE S,X
 VAR Y=SPLAYN_LEFT[X]
 IF Y THEN
  SPLAYN_LEFT[X]=SPLAYN_RIGHT[Y]
  IF SPLAYN_RIGHT[Y]THEN
   SPLAYN_PARENT[SPLAYN_RIGHT[Y]]=X
  ENDIF
  SPLAYN_PARENT[Y]=SPLAYN_PARENT[X]
 ENDIF
 IF !SPLAYN_PARENT[X]THEN
  SPLAY_ROOT[S]=Y
 ELSEIF X==SPLAYN_LEFT[SPLAYN_PARENT[X]]THEN
  SPLAYN_LEFT[SPLAYN_PARENT[X]]=Y
 ELSE
  SPLAYN_RIGHT[SPLAYN_PARENT[X]]=Y
 ENDIF
 IF Y THEN
  SPLAYN_RIGHT[Y]=X
 ENDIF
 SPLAYN_PARENT[X]=Y
END

DEF SPLAY S,X
 WHILE SPLAYN_PARENT[X]
  VAR P=SPLAYN_PARENT[X]
  IF !SPLAYN_PARENT[P]THEN
   IF SPLAYN_LEFT[P]==X THEN
    SPLAY_RIGHT_ROTATE S,P
   ELSE
    SPLAY_LEFT_ROTATE S,P
   ENDIF
  ELSEIF SPLAYN_LEFT[P]==X&&SPLAYN_LEFT[SPLAYN_PARENT[P]]==P THEN
   SPLAY_RIGHT_ROTATE S,SPLAYN_PARENT[P]
   SPLAY_RIGHT_ROTATE S,SPLAYN_PARENT[X]
  ELSEIF SPLAYN_RIGHT[P]==X&&SPLAYN_RIGHT[SPLAYN_PARENT[P]]==P THEN
   SPLAY_LEFT_ROTATE S,SPLAYN_PARENT[P]
   SPLAY_LEFT_ROTATE S,SPLAYN_PARENT[X]
  ELSEIF SPLAYN_LEFT[P]==X&&SPLAYN_RIGHT[SPLAYN_PARENT[P]]==P THEN
   SPLAY_RIGHT_ROTATE S,P
   SPLAY_LEFT_ROTATE S,SPLAYN_PARENT[X]
  ELSE
   SPLAY_LEFT_ROTATE S,P
   SPLAY_RIGHT_ROTATE S,SPLAYN_PARENT[X]
  ENDIF
 WEND
END
DEF SPLAY_REPLACE S,U,V
 IF !SPLAYN_PARENT[U]THEN
  SPLAY_ROOT[S]=V
 ELSEIF U==SPLAYN_LEFT[SPLAYN_PARENT[U]]THEN
  SPLAYN_LEFT[SPLAYN_PARENT[U]]=V
 ELSE
  SPLAYN_RIGHT[SPLAYN_PARENT[U]]=V
 ENDIF
 IF V THEN
  SPLAYN_PARENT[V]=SPLAYN_PARENT[U]
 ENDIF
END

DEF SPLAY_SUBTREE_MIN(S,U)
 WHILE SPLAYN_LEFT[U]
  U=SPLAYN_LEFT[U]
 WEND
 RETURN U
END
DEF SPLAY_SUBTREE_MAX(S,U)
 WHILE SPLAYN_RIGHT[U]
  U=SPLAYN_RIGHT[U]
 WEND
 RETURN U
END

DEF SPLAY_INSERT% S,KEY$,VALUE%
 SPLAY_INSERT S,KEY$,VALUE%,#T_INT
END
DEF SPLAY_INSERT$ S,KEY$,VALUE$
 SPLAY_INSERT S,KEY$,VALUE$,#T_STR
END
DEF SPLAY_INSERT# S,KEY$,VALUE#
 SPLAY_INSERT S,KEY$,VALUE#,#T_REAL
END

DEF SPLAY_INSERT S,KEY$,VALUE,T
 VAR Z=SPLAY_ROOT[S]
 VAR P
 WHILE Z
  P=Z
  IF SPLAYN_KEY$[Z]<KEY$THEN
   Z=SPLAYN_RIGHT[Z]
  ELSE
   Z=SPLAYN_LEFT[Z]
  ENDIF
 WEND
 CASE T
 WHEN #T_INT
  Z=NEW_SPLAYN%(KEY$,VALUE)
 WHEN #T_STR
  Z=NEW_SPLAYN$(KEY$,VALUE)
 WHEN #T_REAL
  Z=NEW_SPLAYN#(KEY$,VALUE)
 ENDCASE
 SPLAYN_PARENT[Z]=P
 IF !P THEN
  SPLAY_ROOT[S]=Z
 ELSEIF SPLAYN_KEY$[P]<SPLAYN_KEY$[Z]THEN
  SPLAYN_RIGHT[P]=Z
 ELSE
  SPLAYN_LEFT[P]=Z
 ENDIF
 SPLAY S,Z
END

DEF SPLAY_FIND(S,KEY$)
 VAR Z=SPLAY_ROOT[S]
 WHILE Z
  IF SPLAYN_KEY$[Z]<KEY$THEN
   Z=SPLAYN_RIGHT[Z]
  ELSEIF SPLAYN_KEY$[Z]==KEY$THEN
   RETURN Z
  ELSE
   Z=SPLAYN_LEFT[Z]
  ENDIF
 WEND
 RETURN 0
END

DEF SPLAY_GET% S,KEY$ OUT FOUND,VALUE%
 VAR N=SPLAY_FIND(S,KEY$)
 IF !N THEN
  FOUND=#FALSE
  VALUE%=0
  RETURN
 ENDIF
 FOUND=#TRUE
 VALUE%=SPLAYN_VAL%[N]
END
DEF SPLAY_GET# S,KEY$ OUT FOUND,VALUE#
 VAR N=SPLAY_FIND(S,KEY$)
 IF !N THEN
  FOUND=#FALSE
  VALUE#=0E0
  RETURN
 ENDIF
 FOUND=#TRUE
 VALUE#=SPLAYN_VAL#[N]
END
DEF SPLAY_GET$ S,KEY$ OUT FOUND,VALUE$
 VAR N=SPLAY_FIND(S,KEY$)
 IF !N THEN
  FOUND=#FALSE
  VALUE$=""
  RETURN
 ENDIF
 FOUND=#TRUE
 VALUE$=SPLAYN_VAL$[N]
END

DEF SPLAY_ERASE S,KEY$
 VAR Z=SPLAY_FIND(S,KEY$)
 IF !Z THEN
  RETURN
 ENDIF
 SPLAY S,Z
 IF !SPLAYN_LEFT[Z]THEN
  SPLAY_REPLACE S,Z,SPLAYN_RIGHT[Z]
 ELSEIF !SPLAYN_RIGHT[Z]THEN
  SPLAY_REPLACE S,Z,SPLAYN_LEFT[Z]
 ELSE
  VAR Y=SPLAY_SUBTREE_MIN(S,SPLAYN_RIGHT[Z])
  IF SPLAYN_PARENT[Y]!=Z THEN
   SPLAY_REPLACE S,Y,SPLAYN_RIGHT[Y]
   SPLAYN_RIGHT[Y]=SPLAYN_RIGHT[Z]
   SPLAYN_PARENT[SPLAYN_RIGHT[Y]]=Y
  ENDIF
  SPLAY_REPLACE S,Z,Y
  SPLAYN_LEFT[Y]=SPLAYN_LEFT[Z]
  SPLAYN_PARENT[SPLAYN_LEFT[Y]]=Y
 ENDIF
 'DELETE Z
END

DEF SPLAY_TEST
 VAR T=NEW_SPLAY_TREE()
 SPLAY_INSERT T,"K","V1"
 SPLAY_INSERT T,"K2","V2"
 SPLAY_INSERT T,"K3","V3"
 VAR F
 SPLAY_GET T,"K" OUT ,F
 ?F
 SPLAY_GET T,"K2" OUT ,F
 ?F
 SPLAY_GET T,"K3" OUT ,F
 ?F
 SPLAY_ERASE T,"K2"
 SPLAY_GET T,"K" OUT ,F
 ?F
 SPLAY_GET T,"K2" OUT ,F
 ?F
 SPLAY_GET T,"K3" OUT ,F
 ?F
 SPLAY_ERASE T,"K3"
 SPLAY_ERASE T,"K"
 SPLAY_GET T,"K" OUT ,F
 ?F
 SPLAY_GET T,"K2" OUT ,F
 ?F
 SPLAY_GET T,"K3" OUT ,F
 ?F

 VAR I
 VAR O=50000
 DIM LST1=ARRAY$(0)
 DIM LST2=ARRAY$(0)
 FOR I=0TO O-1
  PUSH LST1,STR$(I)
  PUSH LST2,STR$(I)
 NEXT
 FOR I=0TO O*10
  SWAP LST1[RND(O)],LST1[RND(O)]
  SWAP LST2[RND(O)],LST2[RND(O)]
 NEXT
 PERFBEGIN 0
 FOR I=0TO O-1
  SPLAY_INSERT T,LST1[I],"a"
 NEXT
 ?PERFEND(0)/O
 PERFBEGIN 0
 FOR I=0TO O-1
  SPLAY_GET T,LST2[I] OUT ,
 NEXT
 ?PERFEND(0)/O
 PERFBEGIN 0
 FOR I=0TO O-1
  SPVAR #GSPRITE,LST1[I],"a"
 NEXT
 ?PERFEND(0)/O
 PERFBEGIN 0
 VAR A$
 FOR I=0TO O-1
  SPVAR #GSPRITE,LST2[I] OUT A$
 NEXT
 ?PERFEND(0)/O
END

DEF GET_SPLAY_ROOT(S)
 RETURN SPLAY_ROOT[S]
END
DEF GET_SPLAYN_LEFT(S)
 RETURN SPLAYN_LEFT[S]
END
DEF GET_SPLAYN_RIGHT(S)
 RETURN SPLAYN_RIGHT[S]
END
DEF GET_SPLAYN_VAL%(S)
 RETURN SPLAYN_VAL%[S]
END
DEF GET_SPLAYN_VAL#(S)
 RETURN SPLAYN_VAL#[S]
END
DEF GET_SPLAYN_VAL$(S)
 RETURN SPLAYN_VAL$[S]
END
DEF GET_SPLAYN_KEY$(S)
 RETURN SPLAYN_KEY$[S]
END

